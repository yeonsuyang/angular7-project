/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { NGXLoggerHttpService } from './http.service';
import { NgxLoggerLevel } from './types/logger-level.enum';
import { LoggerConfig } from './logger.config';
import { NGXLoggerConfigEngine } from './config.engine';
import { NGXLoggerUtils } from './utils/logger.utils';
import { NGXMapperService } from './mapper.service';
/** @type {?} */
export const Levels = [
    'TRACE',
    'DEBUG',
    'INFO',
    'LOG',
    'WARN',
    'ERROR',
    'FATAL',
    'OFF'
];
export class NGXLogger {
    /**
     * @param {?} mapperService
     * @param {?} httpService
     * @param {?} loggerConfig
     */
    constructor(mapperService, httpService, loggerConfig) {
        this.mapperService = mapperService;
        this.httpService = httpService;
        this._withCredentials = false;
        this._isIE = navigator && navigator.userAgent &&
            !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\//) || navigator.userAgent.match(/Edge\//));
        // each instance of the logger should have their own config engine
        this.config = new NGXLoggerConfigEngine(loggerConfig);
        this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    trace(message, ...additional) {
        this._log(NgxLoggerLevel.TRACE, message, additional);
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    debug(message, ...additional) {
        this._log(NgxLoggerLevel.DEBUG, message, additional);
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    info(message, ...additional) {
        this._log(NgxLoggerLevel.INFO, message, additional);
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    log(message, ...additional) {
        this._log(NgxLoggerLevel.LOG, message, additional);
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    warn(message, ...additional) {
        this._log(NgxLoggerLevel.WARN, message, additional);
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    error(message, ...additional) {
        this._log(NgxLoggerLevel.ERROR, message, additional);
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    fatal(message, ...additional) {
        this._log(NgxLoggerLevel.FATAL, message, additional);
    }
    /**
     * @param {?} headers
     * @return {?}
     */
    setCustomHttpHeaders(headers) {
        this._customHttpHeaders = headers;
    }
    /**
     * @param {?} params
     * @return {?}
     */
    setCustomParams(params) {
        this._customParams = params;
    }
    /**
     * @param {?} withCredentials
     * @return {?}
     */
    setWithCredentialsOptionValue(withCredentials) {
        this._withCredentials = withCredentials;
    }
    /**
     * @param {?} monitor
     * @return {?}
     */
    registerMonitor(monitor) {
        this._loggerMonitor = monitor;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    updateConfig(config) {
        this.config.updateConfig(config);
    }
    /**
     * @return {?}
     */
    getConfigSnapshot() {
        return this.config.getConfig();
    }
    /**
     * @private
     * @param {?} level
     * @param {?} metaString
     * @param {?} message
     * @param {?} additional
     * @return {?}
     */
    _logIE(level, metaString, message, additional) {
        // Coloring doesn't work in IE
        // make sure additional isn't null or undefined so that ...additional doesn't error
        additional = additional || [];
        switch (level) {
            case NgxLoggerLevel.WARN:
                console.warn(`${metaString} `, message, ...additional);
                break;
            case NgxLoggerLevel.ERROR:
            case NgxLoggerLevel.FATAL:
                console.error(`${metaString} `, message, ...additional);
                break;
            case NgxLoggerLevel.INFO:
                console.info(`${metaString} `, message, ...additional);
                break;
            default:
                console.log(`${metaString} `, message, ...additional);
        }
    }
    /**
     * @private
     * @param {?} level
     * @param {?} metaString
     * @param {?} message
     * @param {?} additional
     * @return {?}
     */
    _logModern(level, metaString, message, additional) {
        /** @type {?} */
        const color = NGXLoggerUtils.getColor(level);
        // make sure additional isn't null or undefined so that ...additional doesn't error
        additional = additional || [];
        switch (level) {
            case NgxLoggerLevel.WARN:
                console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);
                break;
            case NgxLoggerLevel.ERROR:
            case NgxLoggerLevel.FATAL:
                console.error(`%c${metaString}`, `color:${color}`, message, ...additional);
                break;
            case NgxLoggerLevel.INFO:
                console.info(`%c${metaString}`, `color:${color}`, message, ...additional);
                break;
            //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of
            // the console.trace statement
            // case NgxLoggerLevel.TRACE:
            //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);
            //   break;
            //  Disabling console.debug, because Has this hidden by default.
            // case NgxLoggerLevel.DEBUG:
            //   console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);
            //   break;
            default:
                console.log(`%c${metaString}`, `color:${color}`, message, ...additional);
        }
    }
    /**
     * @private
     * @param {?} level
     * @param {?} message
     * @param {?=} additional
     * @param {?=} logOnServer
     * @return {?}
     */
    _log(level, message, additional = [], logOnServer = true) {
        /** @type {?} */
        const config = this.config.getConfig();
        /** @type {?} */
        const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;
        /** @type {?} */
        const isLogLevelEnabled = level >= config.level;
        if (!(message && (isLog2Server || isLogLevelEnabled))) {
            return;
        }
        /** @type {?} */
        const logLevelString = Levels[level];
        message = NGXLoggerUtils.prepareMessage(message);
        // only use validated parameters for HTTP requests
        /** @type {?} */
        const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);
        /** @type {?} */
        const timestamp = new Date().toISOString();
        // const callerDetails = NGXLoggerUtils.getCallerDetails();
        this.mapperService.getCallerDetails(config.enableSourceMaps).subscribe((/**
         * @param {?} callerDetails
         * @return {?}
         */
        (callerDetails) => {
            /** @type {?} */
            const logObject = {
                message: message,
                additional: validatedAdditionalParameters,
                level: level,
                timestamp: timestamp,
                fileName: callerDetails.fileName,
                lineNumber: callerDetails.lineNumber.toString()
            };
            if (this._loggerMonitor && isLogLevelEnabled) {
                this._loggerMonitor.onLog(logObject);
            }
            if (isLog2Server) {
                // make sure the stack gets sent to the server
                message = message instanceof Error ? message.stack : message;
                logObject.message = message;
                /** @type {?} */
                const headers = this._customHttpHeaders || new HttpHeaders();
                headers.set('Content-Type', 'application/json');
                /** @type {?} */
                const options = {
                    headers: headers,
                    params: this._customParams || new HttpParams(),
                    responseType: config.httpResponseType || 'json',
                    withCredentials: this._withCredentials
                };
                // Allow logging on server even if client log level is off
                this.httpService.logOnServer(config.serverLoggingUrl, logObject, options).subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                (res) => {
                    // I don't think we should do anything on success
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);
                }));
            }
            // if no message or the log level is less than the environ
            if (isLogLevelEnabled && !config.disableConsoleLogging) {
                /** @type {?} */
                const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString, callerDetails.fileName, callerDetails.lineNumber.toString());
                return this._logFunc(level, metaString, message, additional);
            }
        }));
    }
}
NGXLogger.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NGXLogger.ctorParameters = () => [
    { type: NGXMapperService },
    { type: NGXLoggerHttpService },
    { type: LoggerConfig }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype._isIE;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype._logFunc;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype.config;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype._customHttpHeaders;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype._customParams;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype._withCredentials;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype._loggerMonitor;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype.mapperService;
    /**
     * @type {?}
     * @private
     */
    NGXLogger.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,