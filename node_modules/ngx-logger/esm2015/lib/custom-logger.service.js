/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NGXLoggerHttpService } from './http.service';
import { NGXLogger } from './logger.service';
import { NGXMapperService } from './mapper.service';
/**
 * CustomNGXLoggerService is designed to allow users to get a new instance of a logger
 */
export class CustomNGXLoggerService {
    /**
     * @param {?} mapperService
     * @param {?} httpService
     */
    constructor(mapperService, httpService) {
        this.mapperService = mapperService;
        this.httpService = httpService;
    }
    /**
     * @param {?} config
     * @param {?=} httpService
     * @param {?=} logMonitor
     * @param {?=} mapperService
     * @return {?}
     */
    create(config, httpService, logMonitor, mapperService) {
        // you can inject your own httpService or use the default,
        /** @type {?} */
        const logger = new NGXLogger(mapperService || this.mapperService, httpService || this.httpService, config);
        if (logMonitor) {
            logger.registerMonitor(logMonitor);
        }
        return logger;
    }
}
CustomNGXLoggerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CustomNGXLoggerService.ctorParameters = () => [
    { type: NGXMapperService },
    { type: NGXLoggerHttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.mapperService;
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWxvZ2dlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi9jdXN0b20tbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBUyxVQUFVLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFHOUQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRTNDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDOzs7O0FBT2xELE1BQU0sT0FBTyxzQkFBc0I7Ozs7O0lBRWpDLFlBQTZCLGFBQStCLEVBQy9CLFdBQWlDO1FBRGpDLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixnQkFBVyxHQUFYLFdBQVcsQ0FBc0I7SUFDOUQsQ0FBQzs7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsTUFBb0IsRUFBRSxXQUFrQyxFQUFFLFVBQTZCLEVBQ3ZGLGFBQWdDOzs7Y0FFL0IsTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUM5RCxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7UUFFMUMsSUFBSSxVQUFVLEVBQUU7WUFDZCxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3BDO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7O1lBbEJGLFVBQVU7Ozs7WUFOSCxnQkFBZ0I7WUFIaEIsb0JBQW9COzs7Ozs7O0lBWWQsK0NBQWdEOzs7OztJQUNoRCw2Q0FBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0xvZ2dlckNvbmZpZ30gZnJvbSAnLi9sb2dnZXIuY29uZmlnJztcbmltcG9ydCB7TkdYTG9nZ2VySHR0cFNlcnZpY2V9IGZyb20gJy4vaHR0cC5zZXJ2aWNlJztcbmltcG9ydCB7TkdYTG9nZ2VyfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7TkdYTG9nZ2VyTW9uaXRvcn0gZnJvbSAnLi9sb2dnZXItbW9uaXRvcic7XG5pbXBvcnQge05HWE1hcHBlclNlcnZpY2V9IGZyb20gJy4vbWFwcGVyLnNlcnZpY2UnO1xuXG5cbi8qKlxuICogQ3VzdG9tTkdYTG9nZ2VyU2VydmljZSBpcyBkZXNpZ25lZCB0byBhbGxvdyB1c2VycyB0byBnZXQgYSBuZXcgaW5zdGFuY2Ugb2YgYSBsb2dnZXJcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEN1c3RvbU5HWExvZ2dlclNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbWFwcGVyU2VydmljZTogTkdYTWFwcGVyU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBodHRwU2VydmljZTogTkdYTG9nZ2VySHR0cFNlcnZpY2UpIHtcbiAgfVxuXG4gIGNyZWF0ZShjb25maWc6IExvZ2dlckNvbmZpZywgaHR0cFNlcnZpY2U/OiBOR1hMb2dnZXJIdHRwU2VydmljZSwgbG9nTW9uaXRvcj86IE5HWExvZ2dlck1vbml0b3IsXG4gICAgICAgICBtYXBwZXJTZXJ2aWNlPzogTkdYTWFwcGVyU2VydmljZSk6IE5HWExvZ2dlciB7XG4gICAgLy8geW91IGNhbiBpbmplY3QgeW91ciBvd24gaHR0cFNlcnZpY2Ugb3IgdXNlIHRoZSBkZWZhdWx0LFxuICAgIGNvbnN0IGxvZ2dlciA9IG5ldyBOR1hMb2dnZXIobWFwcGVyU2VydmljZSB8fCB0aGlzLm1hcHBlclNlcnZpY2UsXG4gICAgICBodHRwU2VydmljZSB8fCB0aGlzLmh0dHBTZXJ2aWNlLCBjb25maWcpO1xuXG4gICAgaWYgKGxvZ01vbml0b3IpIHtcbiAgICAgIGxvZ2dlci5yZWdpc3Rlck1vbml0b3IobG9nTW9uaXRvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ2dlcjtcbiAgfVxufVxuXG5cbiJdfQ==