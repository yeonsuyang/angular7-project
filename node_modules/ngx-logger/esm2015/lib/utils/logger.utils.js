/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgxLoggerLevel } from '../types/logger-level.enum';
export class NGXLoggerUtils {
    /**
     * @param {?} timestamp
     * @param {?} logLevel
     * @param {?} fileName
     * @param {?} lineNumber
     * @return {?}
     */
    static prepareMetaString(timestamp, logLevel, fileName, lineNumber) {
        /** @type {?} */
        const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';
        return `${timestamp} ${logLevel}${fileDetails}`;
    }
    /**
     * @param {?} level
     * @return {?}
     */
    static getColor(level) {
        switch (level) {
            case NgxLoggerLevel.TRACE:
                return 'blue';
            case NgxLoggerLevel.DEBUG:
                return 'teal';
            case NgxLoggerLevel.INFO:
            case NgxLoggerLevel.LOG:
                return 'gray';
            case NgxLoggerLevel.WARN:
            case NgxLoggerLevel.ERROR:
            case NgxLoggerLevel.FATAL:
                return 'red';
            case NgxLoggerLevel.OFF:
            default:
                return;
        }
    }
    /**
     *  This allows us to see who called the logger
     * @return {?}
     */
    static getCallerDetails() {
        /** @type {?} */
        const err = (new Error(''));
        try {
            // this should produce the line which NGX Logger was called
            /** @type {?} */
            const callerLine = err.stack.split('\n')[4].split('/');
            // returns the file:lineNumber
            /** @type {?} */
            const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');
            return {
                fileName: fileLineNumber[0],
                lineNumber: fileLineNumber[1]
            };
        }
        catch (e) {
            return {
                fileName: null,
                lineNumber: null
            };
        }
    }
    /**
     * @param {?} message
     * @return {?}
     */
    static prepareMessage(message) {
        try {
            if (typeof message !== 'string' && !(message instanceof Error)) {
                message = JSON.stringify(message, null, 2);
            }
        }
        catch (e) {
            // additional = [message, ...additional];
            message = 'The provided "message" value could not be parsed with JSON.stringify().';
        }
        return message;
    }
    /**
     * @param {?} additional
     * @return {?}
     */
    static prepareAdditionalParameters(additional) {
        if (additional === null || additional === undefined) {
            return null;
        }
        return additional.map((/**
         * @param {?} next
         * @param {?} idx
         * @return {?}
         */
        (next, idx) => {
            try {
                // We just want to make sure the JSON can be parsed, we do not want to actually change the type
                if (typeof next === 'object') {
                    JSON.stringify(next);
                }
                return next;
            }
            catch (e) {
                return `The additional[${idx}] value could not be parsed using JSON.stringify().`;
            }
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9sb2dnZXIudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRCxNQUFNLE9BQU8sY0FBYzs7Ozs7Ozs7SUFFekIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQixFQUFFLFVBQWtCOztjQUMxRixXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUVsRSxPQUFPLEdBQUcsU0FBUyxJQUFJLFFBQVEsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBcUI7UUFDbkMsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLE1BQU0sQ0FBQztZQUNoQixLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLE1BQU0sQ0FBQztZQUNoQixLQUFLLGNBQWMsQ0FBQyxJQUFJLENBQUM7WUFDekIsS0FBSyxjQUFjLENBQUMsR0FBRztnQkFDckIsT0FBTyxNQUFNLENBQUM7WUFDaEIsS0FBSyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ3pCLEtBQUssY0FBYyxDQUFDLEtBQUssQ0FBQztZQUMxQixLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLEtBQUssQ0FBQztZQUNmLEtBQUssY0FBYyxDQUFDLEdBQUcsQ0FBQztZQUN4QjtnQkFDRSxPQUFPO1NBQ1Y7SUFDSCxDQUFDOzs7OztJQU1ELE1BQU0sQ0FBQyxnQkFBZ0I7O2NBQ2YsR0FBRyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFM0IsSUFBSTs7O2tCQUVJLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzs7a0JBR2hELGNBQWMsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFFdkYsT0FBTztnQkFDTCxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7YUFDOUIsQ0FBQztTQUNIO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPO2dCQUNMLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFVBQVUsRUFBRSxJQUFJO2FBQ2pCLENBQUM7U0FDSDtJQUVILENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPO1FBQzNCLElBQUk7WUFDRixJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsT0FBTyxZQUFZLEtBQUssQ0FBQyxFQUFFO2dCQUM5RCxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVDO1NBQ0Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLHlDQUF5QztZQUN6QyxPQUFPLEdBQUcseUVBQXlFLENBQUM7U0FDckY7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7OztJQUVELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxVQUFpQjtRQUNsRCxJQUFJLFVBQVUsS0FBSyxJQUFJLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxVQUFVLENBQUMsR0FBRzs7Ozs7UUFBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNsQyxJQUFJO2dCQUNGLCtGQUErRjtnQkFDL0YsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3RCO2dCQUVELE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLGtCQUFrQixHQUFHLHFEQUFxRCxDQUFDO2FBQ25GO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05neExvZ2dlckxldmVsfSBmcm9tICcuLi90eXBlcy9sb2dnZXItbGV2ZWwuZW51bSc7XG5cbmV4cG9ydCBjbGFzcyBOR1hMb2dnZXJVdGlscyB7XG5cbiAgc3RhdGljIHByZXBhcmVNZXRhU3RyaW5nKHRpbWVzdGFtcDogc3RyaW5nLCBsb2dMZXZlbDogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nLCBsaW5lTnVtYmVyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWxlRGV0YWlscyA9IGZpbGVOYW1lID8gYCBbJHtmaWxlTmFtZX06JHtsaW5lTnVtYmVyfV1gIDogJyc7XG5cbiAgICByZXR1cm4gYCR7dGltZXN0YW1wfSAke2xvZ0xldmVsfSR7ZmlsZURldGFpbHN9YDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDb2xvcihsZXZlbDogTmd4TG9nZ2VyTGV2ZWwpOiAnYmx1ZScgfCAndGVhbCcgfCAnZ3JheScgfCAncmVkJyB8IHVuZGVmaW5lZCB7XG4gICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5UUkFDRTpcbiAgICAgICAgcmV0dXJuICdibHVlJztcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuREVCVUc6XG4gICAgICAgIHJldHVybiAndGVhbCc7XG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLklORk86XG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkxPRzpcbiAgICAgICAgcmV0dXJuICdncmF5JztcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuV0FSTjpcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuRVJST1I6XG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkZBVEFMOlxuICAgICAgICByZXR1cm4gJ3JlZCc7XG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLk9GRjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiAgVGhpcyBhbGxvd3MgdXMgdG8gc2VlIHdobyBjYWxsZWQgdGhlIGxvZ2dlclxuICAgKi9cbiAgc3RhdGljIGdldENhbGxlckRldGFpbHMoKTogeyBsaW5lTnVtYmVyOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcgfSB7XG4gICAgY29uc3QgZXJyID0gKG5ldyBFcnJvcignJykpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIHRoaXMgc2hvdWxkIHByb2R1Y2UgdGhlIGxpbmUgd2hpY2ggTkdYIExvZ2dlciB3YXMgY2FsbGVkXG4gICAgICBjb25zdCBjYWxsZXJMaW5lID0gZXJyLnN0YWNrLnNwbGl0KCdcXG4nKVs0XS5zcGxpdCgnLycpO1xuXG4gICAgICAvLyByZXR1cm5zIHRoZSBmaWxlOmxpbmVOdW1iZXJcbiAgICAgIGNvbnN0IGZpbGVMaW5lTnVtYmVyID0gY2FsbGVyTGluZVtjYWxsZXJMaW5lLmxlbmd0aCAtIDFdLnJlcGxhY2UoL1spXS9nLCAnJykuc3BsaXQoJzonKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZU5hbWU6IGZpbGVMaW5lTnVtYmVyWzBdLFxuICAgICAgICBsaW5lTnVtYmVyOiBmaWxlTGluZU51bWJlclsxXVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlTmFtZTogbnVsbCxcbiAgICAgICAgbGluZU51bWJlcjogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgfVxuXG4gIHN0YXRpYyBwcmVwYXJlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycgJiYgIShtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlLCBudWxsLCAyKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBhZGRpdGlvbmFsID0gW21lc3NhZ2UsIC4uLmFkZGl0aW9uYWxdO1xuICAgICAgbWVzc2FnZSA9ICdUaGUgcHJvdmlkZWQgXCJtZXNzYWdlXCIgdmFsdWUgY291bGQgbm90IGJlIHBhcnNlZCB3aXRoIEpTT04uc3RyaW5naWZ5KCkuJztcbiAgICB9XG5cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxuXG4gIHN0YXRpYyBwcmVwYXJlQWRkaXRpb25hbFBhcmFtZXRlcnMoYWRkaXRpb25hbDogYW55W10pIHtcbiAgICBpZiAoYWRkaXRpb25hbCA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRpdGlvbmFsLm1hcCgobmV4dCwgaWR4KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBXZSBqdXN0IHdhbnQgdG8gbWFrZSBzdXJlIHRoZSBKU09OIGNhbiBiZSBwYXJzZWQsIHdlIGRvIG5vdCB3YW50IHRvIGFjdHVhbGx5IGNoYW5nZSB0aGUgdHlwZVxuICAgICAgICBpZiAodHlwZW9mIG5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkobmV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGBUaGUgYWRkaXRpb25hbFske2lkeH1dIHZhbHVlIGNvdWxkIG5vdCBiZSBwYXJzZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnkoKS5gO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==