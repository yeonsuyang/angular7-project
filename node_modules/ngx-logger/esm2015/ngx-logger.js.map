{
  "version": 3,
  "file": "ngx-logger.js",
  "sources": [
    "ng://ngx-logger/out/lib/logger.module.ts",
    "ng://ngx-logger/out/lib/types/ngx-log.interface.ts",
    "ng://ngx-logger/out/lib/logger-monitor.ts",
    "ng://ngx-logger/out/lib/custom-logger.service.ts",
    "ng://ngx-logger/out/lib/logger.service.ts",
    "ng://ngx-logger/out/lib/mapper.service.ts",
    "ng://ngx-logger/out/lib/types/log-position.ts",
    "ng://ngx-logger/out/lib/utils/logger.utils.ts",
    "ng://ngx-logger/out/lib/config.engine.ts",
    "ng://ngx-logger/out/lib/logger.config.ts",
    "ng://ngx-logger/out/lib/types/logger-level.enum.ts",
    "ng://ngx-logger/out/lib/http.service.ts"
  ],
  "sourcesContent": [
    "import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NGXLogger} from './logger.service';\nimport {LoggerConfig} from './logger.config';\nimport {CustomNGXLoggerService} from './custom-logger.service';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXMapperService} from './mapper.service';\n\nexport * from './logger.service';\n\nexport * from './logger.config';\n\nexport * from './custom-logger.service';\n\nexport * from './logger-monitor';\n\nexport * from './http.service';\n\nexport * from './mapper.service';\n\nexport * from './utils/logger.utils';\nexport * from './types/logger-level.enum';\nexport * from './types/ngx-log.interface';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    NGXLogger,\n    NGXLoggerHttpService,\n    CustomNGXLoggerService,\n    NGXMapperService\n  ]\n})\nexport class LoggerModule {\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        {provide: LoggerConfig, useValue: config || {}},\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService,\n        NGXMapperService\n      ]\n    };\n  }\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService,\n        NGXMapperService\n      ]\n    };\n  }\n}\n",
    "import {NgxLoggerLevel} from './logger-level.enum';\n\nexport class NGXLogInterface {\n  level: NgxLoggerLevel;\n  timestamp: string;\n  fileName: string;\n  lineNumber: string;\n  message: string;\n  additional: any[];\n}\n",
    "import {NGXLogInterface} from './types/ngx-log.interface';\n\nexport abstract class NGXLoggerMonitor {\n  abstract onLog(logObject: NGXLogInterface): void;\n}\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\n\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXLogger} from './logger.service';\nimport {NGXLoggerMonitor} from './logger-monitor';\nimport {NGXMapperService} from './mapper.service';\n\n\n/**\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\n */\n@Injectable()\nexport class CustomNGXLoggerService {\n\n  constructor(private readonly mapperService: NGXMapperService,\n              private readonly httpService: NGXLoggerHttpService,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n  }\n\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService, logMonitor?: NGXLoggerMonitor,\n         mapperService?: NGXMapperService): NGXLogger {\n    // you can inject your own httpService or use the default,\n    const logger = new NGXLogger(mapperService || this.mapperService,\n      httpService || this.httpService, config, this.platformId);\n\n    if (logMonitor) {\n      logger.registerMonitor(logMonitor);\n    }\n\n    return logger;\n  }\n}\n\n\n",
    "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { NGXLoggerHttpService } from './http.service';\nimport {LogPosition} from './types/log-position';\nimport { NgxLoggerLevel } from './types/logger-level.enum';\nimport { LoggerConfig } from './logger.config';\nimport { NGXLoggerConfigEngine } from './config.engine';\nimport { NGXLoggerUtils } from './utils/logger.utils';\nimport { NGXLoggerMonitor } from './logger-monitor';\nimport { NGXLogInterface } from './types/ngx-log.interface';\nimport { NGXMapperService } from './mapper.service';\n\nexport const Levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'LOG',\n  'WARN',\n  'ERROR',\n  'FATAL',\n  'OFF'\n];\n\n\n@Injectable()\nexport class NGXLogger {\n  private readonly _isIE: boolean;\n  private readonly _logFunc: Function;\n  private config: NGXLoggerConfigEngine;\n  private _customHttpHeaders: HttpHeaders;\n  private _customParams: HttpParams;\n  private _withCredentials: boolean = false;\n\n  private _loggerMonitor: NGXLoggerMonitor;\n\n  constructor(private readonly mapperService: NGXMapperService, private readonly httpService: NGXLoggerHttpService,\n              loggerConfig: LoggerConfig, @Inject(PLATFORM_ID) private readonly platformId) {\n    this._isIE = isPlatformBrowser(platformId) &&\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n\n    // each instance of the logger should have their own config engine\n    this.config = new NGXLoggerConfigEngine(loggerConfig);\n\n    this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);\n\n  }\n\n  public trace(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.TRACE, message, additional);\n  }\n\n  public debug(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\n  }\n\n  public info(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.INFO, message, additional);\n  }\n\n  public log(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.LOG, message, additional);\n  }\n\n  public warn(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.WARN, message, additional);\n  }\n\n  public error(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.ERROR, message, additional);\n  }\n\n  public fatal(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.FATAL, message, additional);\n  }\n\n  public setCustomHttpHeaders(headers: HttpHeaders) {\n    this._customHttpHeaders = headers;\n  }\n\n  public setCustomParams(params: HttpParams) {\n    this._customParams = params;\n  }\n\n  public setWithCredentialsOptionValue(withCredentials: boolean) {\n    this._withCredentials = withCredentials;\n  }\n\n  public registerMonitor(monitor: NGXLoggerMonitor) {\n    this._loggerMonitor = monitor;\n  }\n\n  public updateConfig(config: LoggerConfig) {\n    this.config.updateConfig(config);\n  }\n\n  public getConfigSnapshot(): LoggerConfig {\n    return this.config.getConfig();\n  }\n\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    // Coloring doesn't work in IE\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`${metaString} `, message, ...additional);\n        break;\n      default:\n        console.log(`${metaString} `, message, ...additional);\n    }\n  }\n\n  private _logModern(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    const color = NGXLoggerUtils.getColor(level);\n\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of\n      // the console.trace statement\n      // case NgxLoggerLevel.TRACE:\n      //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n\n      //  Disabling console.debug, because Has this hidden by default.\n      // case NgxLoggerLevel.DEBUG:\n      //   console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n      default:\n        console.log(`%c${metaString}`, `color:${color}`, message, ...additional);\n    }\n  }\n\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\n    const config = this.config.getConfig();\n    const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;\n    const isLogLevelEnabled = level >= config.level;\n\n    if (!(message && (isLog2Server || isLogLevelEnabled))) {\n      return;\n    }\n\n    const logLevelString = Levels[level];\n\n    message = NGXLoggerUtils.prepareMessage(message);\n\n    // only use validated parameters for HTTP requests\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\n\n    const timestamp = new Date().toISOString();\n\n    // const callerDetails = NGXLoggerUtils.getCallerDetails();\n    this.mapperService.getCallerDetails(config.enableSourceMaps).subscribe((callerDetails: LogPosition) => {\n      const logObject: NGXLogInterface = {\n        message: message,\n        additional: validatedAdditionalParameters,\n        level: level,\n        timestamp: timestamp,\n        fileName: callerDetails.fileName,\n        lineNumber: callerDetails.lineNumber.toString()\n      };\n\n      if (this._loggerMonitor && isLogLevelEnabled) {\n        this._loggerMonitor.onLog(logObject);\n      }\n\n      if (isLog2Server) {\n        // make sure the stack gets sent to the server\n        message = message instanceof Error ? message.stack : message;\n        logObject.message = message;\n\n        const headers = this._customHttpHeaders || new HttpHeaders();\n        headers.set('Content-Type', 'application/json');\n\n        const options = {\n          headers: headers,\n          params: this._customParams || new HttpParams(),\n          responseType: config.httpResponseType || 'json',\n          withCredentials: this._withCredentials\n        };\n        // Allow logging on server even if client log level is off\n        this.httpService.logOnServer(config.serverLoggingUrl, logObject, options).subscribe((res: any) => {\n            // I don't think we should do anything on success\n          },\n          (error: HttpErrorResponse) => {\n            this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\n          }\n        );\n      }\n\n\n      // if no message or the log level is less than the environ\n      if (isLogLevelEnabled && !config.disableConsoleLogging) {\n        const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString,\n          callerDetails.fileName, callerDetails.lineNumber.toString());\n\n        return this._logFunc(level, metaString, message, additional);\n      }\n    });\n  }\n}\n",
    "import {SourceMap} from '@angular/compiler';\nimport {Injectable} from '@angular/core';\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\nimport * as vlq from 'vlq';\nimport {Observable, of} from 'rxjs';\nimport {catchError, filter, map, retry, switchMap} from 'rxjs/operators';\nimport {LogPosition} from './types/log-position';\n\n@Injectable()\nexport class NGXMapperService {\n\n  // used to cache source maps\n  private cache: { [key: string]: SourceMap } = {};\n  private errorCache: { [key: string]: boolean } = {};\n\n  constructor(private httpBackend: HttpBackend) {\n  }\n\n  /*\n  Static Functions\n */\n  private static getStackLine(): string {\n    const error = new Error();\n\n    try {\n      // noinspection ExceptionCaughtLocallyJS\n      throw error;\n    } catch (e) {\n\n      try {\n        return error.stack.split('\\n')[5];\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  private static getPosition(stackLine: string): LogPosition {\n    // strip base path, then parse filename, line, and column\n    const position = stackLine.substring(stackLine.lastIndexOf('\\/') + 1, stackLine.indexOf(')'));\n    const dataArray = position.split(':');\n    if (dataArray.length === 3) {\n      return new LogPosition(dataArray[0], +dataArray[1], +dataArray[2]);\n    }\n    return new LogPosition('unknown', 0, 0);\n  }\n\n  private static getTranspileLocation(stackLine: string): string {\n    return stackLine.substring(stackLine.indexOf('(') + 1, stackLine.indexOf(')'));\n  }\n\n  private static getMapFilePath(stackLine: string): string {\n    const file = NGXMapperService.getTranspileLocation(stackLine);\n    const mapFullPath = file.substring(0, file.lastIndexOf(':'));\n    return mapFullPath.substring(0, mapFullPath.lastIndexOf(':')) + '.map';\n  }\n\n  private static getMapping(sourceMap: SourceMap, position: LogPosition): LogPosition {\n    // => ';' indicates end of a line\n    // => ',' separates mappings in a line\n    // decoded mapping => [ generatedCodeColumn, sourceFileIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]\n    let sourceFileIndex = 0,   // second field\n      sourceCodeLine = 0,    // third field\n      sourceCodeColumn = 0;  // fourth field\n\n    const lines = sourceMap.mappings.split(';');\n\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n      // reset column position to 0 after each line\n      let generatedCodeColumn = 0;\n      // decode sections in line\n      const columns = lines[lineIndex].split(',');\n\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n        const decodedSection = vlq.decode(columns[columnIndex]);\n        if (decodedSection.length >= 4) {\n          // update relative positions\n          generatedCodeColumn += decodedSection[0];\n          sourceFileIndex += decodedSection[1];\n          sourceCodeLine += decodedSection[2];\n          sourceCodeColumn += decodedSection[3];\n        }\n\n        // check if matching map\n        if (lineIndex === position.lineNumber) {\n          if (generatedCodeColumn === position.columnNumber) {\n            // matching column and line found\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine - 1, sourceCodeColumn);\n          } else if (columnIndex + 1 === columns.length) {\n            // matching column not found, but line is correct\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine - 1, 0);\n          }\n        }\n      }\n    }\n    // failed if reached\n    return new LogPosition('unknown', 0, 0);\n  }\n\n  /**\n   * does the http get request to get the source map\n   * @param sourceMapLocation\n   * @param distPosition\n   */\n  private _getSourceMap(sourceMapLocation: string, distPosition: LogPosition): Observable<LogPosition> {\n    const req = new HttpRequest<SourceMap>('GET', sourceMapLocation);\n\n    return this.httpBackend.handle(req).pipe(\n      filter(e => (e instanceof HttpResponse)),\n      map<HttpResponse<SourceMap>, SourceMap>((httpResponse: HttpResponse<SourceMap>) => httpResponse.body),\n      map<SourceMap, LogPosition>(sourceMap => {\n        // store file in cache if not already stored\n        if (!this.cache.hasOwnProperty(sourceMapLocation)) {\n          this.cache[sourceMapLocation] = sourceMap;\n        }\n        // map generated position to source position\n        return NGXMapperService.getMapping(sourceMap, distPosition);\n      }),\n      retry(3),\n      // if there is an error getting the source, map fall back to the filename and line number of\n      catchError(() => {\n        this.errorCache[sourceMapLocation] = true;\n        return of(distPosition);\n      })\n    );\n  }\n\n  /**\n   * Returns the LogPosition for the current log\n   * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name\n   * and number of the call\n   * @param sourceMapsEnabled\n   */\n  public getCallerDetails(sourceMapsEnabled: boolean): Observable<LogPosition> {\n    // parse generated file mapping from stack trace\n\n    const stackLine = NGXMapperService.getStackLine();\n\n    // if we were not able to parse the stackLine, just return an empty Log Position\n    if (!stackLine) {\n      return of(new LogPosition('', 0, 0));\n    }\n\n    return of([\n      NGXMapperService.getPosition(stackLine),\n      NGXMapperService.getMapFilePath(stackLine)\n    ]).pipe(\n      switchMap<[LogPosition, string], Observable<LogPosition>>(([distPosition, sourceMapLocation]) => {\n\n        // if source maps are not enabled, or if we've previously tried to get the source maps, but they failed,\n        // then just use the position of the JS instead of the source\n        if (!sourceMapsEnabled || this.errorCache.hasOwnProperty(sourceMapLocation)) {\n          return of(distPosition);\n        }\n\n\n        // check if we have map has already, otherwise request from server\n        if (this.cache.hasOwnProperty(sourceMapLocation)) {\n          return of(NGXMapperService.getMapping(this.cache[sourceMapLocation], distPosition));\n        }\n\n        // finally try to get the source map and return the position\n        return this._getSourceMap(sourceMapLocation, distPosition);\n      })\n    );\n\n\n  }\n}\n\n\n\n\n",
    "export class LogPosition {\n  constructor(\n    public fileName: string,\n    public lineNumber: number,\n    public columnNumber: number\n  ) {}\n  toString() {\n    return this.fileName + ':' + this.lineNumber + ':' + this.columnNumber;\n  }\n}\n",
    "import {NgxLoggerLevel} from '../types/logger-level.enum';\n\nexport class NGXLoggerUtils {\n\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\n\n    return `${timestamp} ${logLevel}${fileDetails}`;\n  }\n\n  static getColor(level: NgxLoggerLevel): 'blue' | 'teal' | 'gray' | 'red' | undefined {\n    switch (level) {\n      case NgxLoggerLevel.TRACE:\n        return 'blue';\n      case NgxLoggerLevel.DEBUG:\n        return 'teal';\n      case NgxLoggerLevel.INFO:\n      case NgxLoggerLevel.LOG:\n        return 'gray';\n      case NgxLoggerLevel.WARN:\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        return 'red';\n      case NgxLoggerLevel.OFF:\n      default:\n        return;\n    }\n  }\n\n\n  /**\n   *  This allows us to see who called the logger\n   */\n  static getCallerDetails(): { lineNumber: string, fileName: string } {\n    const err = (new Error(''));\n\n    try {\n      // this should produce the line which NGX Logger was called\n      const callerLine = err.stack.split('\\n')[4].split('/');\n\n      // returns the file:lineNumber\n      const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');\n\n      return {\n        fileName: fileLineNumber[0],\n        lineNumber: fileLineNumber[1]\n      };\n    } catch (e) {\n      return {\n        fileName: null,\n        lineNumber: null\n      };\n    }\n\n  }\n\n  static prepareMessage(message) {\n    try {\n      if (typeof message !== 'string' && !(message instanceof Error)) {\n        message = JSON.stringify(message, null, 2);\n      }\n    } catch (e) {\n      // additional = [message, ...additional];\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n    }\n\n    return message;\n  }\n\n  static prepareAdditionalParameters(additional: any[]) {\n    if (additional === null || additional === undefined) {\n      return null;\n    }\n\n    return additional.map((next, idx) => {\n      try {\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\n        if (typeof next === 'object') {\n          JSON.stringify(next);\n        }\n\n        return next;\n      } catch (e) {\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`;\n      }\n    });\n  }\n\n}\n",
    "import {LoggerConfig} from './logger.config';\n\nexport class NGXLoggerConfigEngine {\n\n  private _config;\n  constructor(readonly config: LoggerConfig) {\n    this._config = config;\n  }\n\n  updateConfig(config: LoggerConfig) {\n    this._config = this._clone(config);\n  }\n\n  getConfig() {\n    return this._clone(this._config);\n  }\n\n\n  // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)\n  // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make\n  // this a deep clone\n  private _clone(object: any) {\n    const cloneConfig: LoggerConfig = new LoggerConfig();\n\n    Object.keys(object).forEach((key) => {\n      cloneConfig[key] = object[key];\n    });\n\n    return cloneConfig;\n  }\n}\n",
    "import {NgxLoggerLevel} from './types/logger-level.enum';\n\nexport class LoggerConfig {\n  level: NgxLoggerLevel;\n  serverLogLevel?: NgxLoggerLevel;\n  serverLoggingUrl?: string;\n  disableConsoleLogging?: boolean;\n  httpResponseType?: 'arraybuffer' | 'blob' | 'text' | 'json';\n  enableSourceMaps?: boolean;\n}\n",
    "export enum NgxLoggerLevel {\n  TRACE = 0,\n  DEBUG,\n  INFO,\n  LOG,\n  WARN,\n  ERROR,\n  FATAL,\n  OFF\n}\n",
    "import { Injectable } from '@angular/core';\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport { NGXLogInterface } from './types/ngx-log.interface';\n\n\n\n@Injectable()\nexport class NGXLoggerHttpService {\n  constructor(private readonly httpBackend: HttpBackend) { }\n\n  logOnServer(url: string, log: NGXLogInterface, options: object): Observable<any> {\n    // HttpBackend skips all HttpInterceptors\n    // They may log errors using this service causing circular calls\n    const req = new HttpRequest<any>('POST', url, log, options || {});\n    return this.httpBackend.handle(req).pipe(\n      filter(e => e instanceof HttpResponse),\n      map<HttpResponse<any>, any>((httpResponse: HttpResponse<any>) => httpResponse.body)\n    );\n  }\n\n}\n"
  ],
  "names": [
    "vlq.decode"
  ],
  "mappings": "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"
}
