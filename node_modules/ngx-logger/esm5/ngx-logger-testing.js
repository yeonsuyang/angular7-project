import { LoggerConfig, LoggerModule, NGXLogger, NGXLoggerHttpService, CustomNGXLoggerService, NGXMapperService } from 'ngx-logger';
import { of } from 'rxjs';
import { NgModule } from '@angular/core';

var NGXLoggerMock = /** @class */ (function () {
    function NGXLoggerMock() {
    }
    NGXLoggerMock.prototype.trace = function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    NGXLoggerMock.prototype.debug = function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    NGXLoggerMock.prototype.info = function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    NGXLoggerMock.prototype.log = function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    NGXLoggerMock.prototype.warn = function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    NGXLoggerMock.prototype.error = function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    NGXLoggerMock.prototype.fatal = function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    NGXLoggerMock.prototype.updateConfig = function (config) {
    };
    NGXLoggerMock.prototype.setCustomHttpHeaders = function (headers) {
    };
    NGXLoggerMock.prototype.setCustomParams = function (params) {
    };
    NGXLoggerMock.prototype.registerMonitor = function (monitor) {
    };
    NGXLoggerMock.prototype.getConfigSnapshot = function () {
        return new LoggerConfig();
    };
    return NGXLoggerMock;
}());
var CustomNGXLoggerServiceMock = /** @class */ (function () {
    function CustomNGXLoggerServiceMock() {
    }
    CustomNGXLoggerServiceMock.prototype.create = function () {
        return new NGXLoggerMock();
    };
    return CustomNGXLoggerServiceMock;
}());
var NGXLoggerHttpServiceMock = /** @class */ (function () {
    function NGXLoggerHttpServiceMock() {
    }
    NGXLoggerHttpServiceMock.prototype.logOnServer = function (url, message, additional, timestamp, logLevel) {
        return of({});
    };
    return NGXLoggerHttpServiceMock;
}());
var NGXMapperServiceMock = /** @class */ (function () {
    function NGXMapperServiceMock() {
    }
    NGXMapperServiceMock.prototype.getCallerDetails = function () {
        return of({ fileName: 'test.ts', lineNumber: 0, columnNumber: 0 });
    };
    return NGXMapperServiceMock;
}());
var LoggerTestingModule = /** @class */ (function () {
    function LoggerTestingModule() {
    }
    return LoggerTestingModule;
}());
LoggerTestingModule.decorators = [
    { type: NgModule, args: [{
                imports: [LoggerModule],
                providers: [
                    { provide: NGXLogger, useClass: NGXLoggerMock },
                    { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },
                    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
                    { provide: NGXMapperService, useClass: NGXMapperServiceMock }
                ]
            },] },
];

export { NGXLoggerMock, CustomNGXLoggerServiceMock, NGXLoggerHttpServiceMock, LoggerTestingModule, NGXMapperServiceMock as Éµa };
//# sourceMappingURL=ngx-logger-testing.js.map
