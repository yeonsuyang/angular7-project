/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NGXLoggerHttpService } from './http.service';
import { NGXLogger } from './logger.service';
import { NGXMapperService } from './mapper.service';
/**
 * CustomNGXLoggerService is designed to allow users to get a new instance of a logger
 */
var CustomNGXLoggerService = /** @class */ (function () {
    function CustomNGXLoggerService(mapperService, httpService) {
        this.mapperService = mapperService;
        this.httpService = httpService;
    }
    /**
     * @param {?} config
     * @param {?=} httpService
     * @param {?=} logMonitor
     * @param {?=} mapperService
     * @return {?}
     */
    CustomNGXLoggerService.prototype.create = /**
     * @param {?} config
     * @param {?=} httpService
     * @param {?=} logMonitor
     * @param {?=} mapperService
     * @return {?}
     */
    function (config, httpService, logMonitor, mapperService) {
        // you can inject your own httpService or use the default,
        /** @type {?} */
        var logger = new NGXLogger(mapperService || this.mapperService, httpService || this.httpService, config);
        if (logMonitor) {
            logger.registerMonitor(logMonitor);
        }
        return logger;
    };
    CustomNGXLoggerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CustomNGXLoggerService.ctorParameters = function () { return [
        { type: NGXMapperService },
        { type: NGXLoggerHttpService }
    ]; };
    return CustomNGXLoggerService;
}());
export { CustomNGXLoggerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.mapperService;
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWxvZ2dlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi9jdXN0b20tbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBUyxVQUFVLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFHOUQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRTNDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDOzs7O0FBTWxEO0lBR0UsZ0NBQTZCLGFBQStCLEVBQy9CLFdBQWlDO1FBRGpDLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixnQkFBVyxHQUFYLFdBQVcsQ0FBc0I7SUFDOUQsQ0FBQzs7Ozs7Ozs7SUFFRCx1Q0FBTTs7Ozs7OztJQUFOLFVBQU8sTUFBb0IsRUFBRSxXQUFrQyxFQUFFLFVBQTZCLEVBQ3ZGLGFBQWdDOzs7WUFFL0IsTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUM5RCxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7UUFFMUMsSUFBSSxVQUFVLEVBQUU7WUFDZCxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3BDO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Z0JBbEJGLFVBQVU7Ozs7Z0JBTkgsZ0JBQWdCO2dCQUhoQixvQkFBb0I7O0lBNEI1Qiw2QkFBQztDQUFBLEFBbkJELElBbUJDO1NBbEJZLHNCQUFzQjs7Ozs7O0lBRXJCLCtDQUFnRDs7Ozs7SUFDaEQsNkNBQWtEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtMb2dnZXJDb25maWd9IGZyb20gJy4vbG9nZ2VyLmNvbmZpZyc7XG5pbXBvcnQge05HWExvZ2dlckh0dHBTZXJ2aWNlfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XG5pbXBvcnQge05HWExvZ2dlcn0gZnJvbSAnLi9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQge05HWExvZ2dlck1vbml0b3J9IGZyb20gJy4vbG9nZ2VyLW1vbml0b3InO1xuaW1wb3J0IHtOR1hNYXBwZXJTZXJ2aWNlfSBmcm9tICcuL21hcHBlci5zZXJ2aWNlJztcblxuXG4vKipcbiAqIEN1c3RvbU5HWExvZ2dlclNlcnZpY2UgaXMgZGVzaWduZWQgdG8gYWxsb3cgdXNlcnMgdG8gZ2V0IGEgbmV3IGluc3RhbmNlIG9mIGEgbG9nZ2VyXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1hcHBlclNlcnZpY2U6IE5HWE1hcHBlclNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaHR0cFNlcnZpY2U6IE5HWExvZ2dlckh0dHBTZXJ2aWNlKSB7XG4gIH1cblxuICBjcmVhdGUoY29uZmlnOiBMb2dnZXJDb25maWcsIGh0dHBTZXJ2aWNlPzogTkdYTG9nZ2VySHR0cFNlcnZpY2UsIGxvZ01vbml0b3I/OiBOR1hMb2dnZXJNb25pdG9yLFxuICAgICAgICAgbWFwcGVyU2VydmljZT86IE5HWE1hcHBlclNlcnZpY2UpOiBOR1hMb2dnZXIge1xuICAgIC8vIHlvdSBjYW4gaW5qZWN0IHlvdXIgb3duIGh0dHBTZXJ2aWNlIG9yIHVzZSB0aGUgZGVmYXVsdCxcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgTkdYTG9nZ2VyKG1hcHBlclNlcnZpY2UgfHwgdGhpcy5tYXBwZXJTZXJ2aWNlLFxuICAgICAgaHR0cFNlcnZpY2UgfHwgdGhpcy5odHRwU2VydmljZSwgY29uZmlnKTtcblxuICAgIGlmIChsb2dNb25pdG9yKSB7XG4gICAgICBsb2dnZXIucmVnaXN0ZXJNb25pdG9yKGxvZ01vbml0b3IpO1xuICAgIH1cblxuICAgIHJldHVybiBsb2dnZXI7XG4gIH1cbn1cblxuXG4iXX0=