/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NGXLogger } from './logger.service';
import { LoggerConfig } from './logger.config';
import { CustomNGXLoggerService } from './custom-logger.service';
import { NGXLoggerHttpService } from './http.service';
import { NGXMapperService } from './mapper.service';
var LoggerModule = /** @class */ (function () {
    function LoggerModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    LoggerModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: LoggerModule,
            providers: [
                { provide: LoggerConfig, useValue: config || {} },
                NGXLogger,
                NGXLoggerHttpService,
                CustomNGXLoggerService,
                NGXMapperService
            ]
        };
    };
    /**
     * @return {?}
     */
    LoggerModule.forChild = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: LoggerModule,
            providers: [
                NGXLogger,
                NGXLoggerHttpService,
                CustomNGXLoggerService,
                NGXMapperService
            ]
        };
    };
    LoggerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    providers: [
                        NGXLogger,
                        NGXLoggerHttpService,
                        CustomNGXLoggerService,
                        NGXMapperService
                    ]
                },] }
    ];
    return LoggerModule;
}());
export { LoggerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2dnZXIvIiwic291cmNlcyI6WyJsaWIvbG9nZ2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBc0IsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQ7SUFBQTtJQW1DQSxDQUFDOzs7OztJQXZCUSxvQkFBTzs7OztJQUFkLFVBQWUsTUFBdUM7UUFDcEQsT0FBTztZQUNMLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sSUFBSSxFQUFFLEVBQUM7Z0JBQy9DLFNBQVM7Z0JBQ1Qsb0JBQW9CO2dCQUNwQixzQkFBc0I7Z0JBQ3RCLGdCQUFnQjthQUNqQjtTQUNGLENBQUM7SUFDSixDQUFDOzs7O0lBQ00scUJBQVE7OztJQUFmO1FBQ0UsT0FBTztZQUNMLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFNBQVMsRUFBRTtnQkFDVCxTQUFTO2dCQUNULG9CQUFvQjtnQkFDcEIsc0JBQXNCO2dCQUN0QixnQkFBZ0I7YUFDakI7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBbENGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsWUFBWTtxQkFDYjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1QsU0FBUzt3QkFDVCxvQkFBb0I7d0JBQ3BCLHNCQUFzQjt3QkFDdEIsZ0JBQWdCO3FCQUNqQjtpQkFDRjs7SUF5QkQsbUJBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQXhCWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge01vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtOR1hMb2dnZXJ9IGZyb20gJy4vbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHtMb2dnZXJDb25maWd9IGZyb20gJy4vbG9nZ2VyLmNvbmZpZyc7XG5pbXBvcnQge0N1c3RvbU5HWExvZ2dlclNlcnZpY2V9IGZyb20gJy4vY3VzdG9tLWxvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7TkdYTG9nZ2VySHR0cFNlcnZpY2V9IGZyb20gJy4vaHR0cC5zZXJ2aWNlJztcbmltcG9ydCB7TkdYTWFwcGVyU2VydmljZX0gZnJvbSAnLi9tYXBwZXIuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTkdYTG9nZ2VyLFxuICAgIE5HWExvZ2dlckh0dHBTZXJ2aWNlLFxuICAgIEN1c3RvbU5HWExvZ2dlclNlcnZpY2UsXG4gICAgTkdYTWFwcGVyU2VydmljZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIExvZ2dlck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogTG9nZ2VyQ29uZmlnIHwgbnVsbCB8IHVuZGVmaW5lZCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTG9nZ2VyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBMb2dnZXJDb25maWcsIHVzZVZhbHVlOiBjb25maWcgfHwge319LFxuICAgICAgICBOR1hMb2dnZXIsXG4gICAgICAgIE5HWExvZ2dlckh0dHBTZXJ2aWNlLFxuICAgICAgICBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlLFxuICAgICAgICBOR1hNYXBwZXJTZXJ2aWNlXG4gICAgICBdXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZm9yQ2hpbGQoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBMb2dnZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgTkdYTG9nZ2VyLFxuICAgICAgICBOR1hMb2dnZXJIdHRwU2VydmljZSxcbiAgICAgICAgQ3VzdG9tTkdYTG9nZ2VyU2VydmljZSxcbiAgICAgICAgTkdYTWFwcGVyU2VydmljZVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==