{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-logger/lib/http.service.ts","ng://ngx-logger/lib/types/logger-level.enum.ts","ng://ngx-logger/lib/logger.config.ts","ng://ngx-logger/lib/config.engine.ts","ng://ngx-logger/lib/utils/logger.utils.ts","ng://ngx-logger/lib/types/log-position.ts","ng://ngx-logger/lib/mapper.service.ts","ng://ngx-logger/lib/logger.service.ts","ng://ngx-logger/lib/custom-logger.service.ts","ng://ngx-logger/lib/logger.module.ts","ng://ngx-logger/lib/logger-monitor.ts","ng://ngx-logger/lib/types/ngx-log.interface.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","NGXLoggerHttpService","httpBackend","this","prototype","logOnServer","url","log","options","req","HttpRequest","handle","pipe","filter","HttpResponse","map","httpResponse","body","Injectable","HttpBackend","TRACE","DEBUG","INFO","LOG","WARN","ERROR","FATAL","OFF","LoggerConfig","NGXLoggerConfigEngine","config","_config","updateConfig","_clone","getConfig","object","cloneConfig","Object","keys","forEach","key","NGXLoggerUtils","prepareMetaString","timestamp","logLevel","fileName","lineNumber","getColor","level","NgxLoggerLevel","getCallerDetails","err","Error","callerLine","stack","split","fileLineNumber","replace","prepareMessage","message","JSON","stringify","prepareAdditionalParameters","additional","undefined","idx","LogPosition","columnNumber","toString","NGXMapperService","cache","errorCache","getStackLine","getPosition","stackLine","dataArray","substring","lastIndexOf","indexOf","getTranspileLocation","getMapFilePath","file","mapFullPath","getMapping","sourceMap","position","sourceFileIndex","sourceCodeLine","sourceCodeColumn","lines","mappings","lineIndex","generatedCodeColumn","columns","columnIndex","decodedSection","vlq.decode","sources","_getSourceMap","sourceMapLocation","distPosition","_this","hasOwnProperty","retry","catchError","of","sourceMapsEnabled","switchMap","_a","_b","Levels","NGXLogger","mapperService","httpService","loggerConfig","_withCredentials","_isIE","navigator","userAgent","match","_logFunc","_logIE","bind","_logModern","trace","_i","_log","debug","info","warn","fatal","setCustomHttpHeaders","headers","_customHttpHeaders","setCustomParams","params","_customParams","setWithCredentialsOptionValue","withCredentials","registerMonitor","monitor","_loggerMonitor","getConfigSnapshot","metaString","console","apply","color","isLog2Server","serverLoggingUrl","serverLogLevel","isLogLevelEnabled","logLevelString","validatedAdditionalParameters","Date","toISOString","enableSourceMaps","subscribe","callerDetails","logObject","onLog","HttpHeaders","set","HttpParams","responseType","httpResponseType","res","disableConsoleLogging","CustomNGXLoggerService","create","logMonitor","logger","LoggerModule","forRoot","ngModule","providers","provide","useValue","forChild","NgModule","args","imports","CommonModule","NGXLogInterface"],"mappings":"4gBAuHO,SAASA,EAAOC,EAAGC,GACtB,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBK,EAAYC,EAA3BC,EAAIL,EAAEM,KAAKR,GAAOS,EAAK,GAC3B,IACI,WAAc,IAANR,GAAgBA,KAAM,MAAQI,EAAIE,EAAEG,QAAQC,MAAMF,EAAGG,KAAKP,EAAEQ,OAExE,MAAOC,GAASR,EAAI,CAAEQ,MAAOA,GACjC,QACQ,IACQT,IAAMA,EAAEM,OAAST,EAAIK,EAAU,YAAIL,EAAEM,KAAKD,GAE1D,QAAkB,GAAID,EAAG,MAAMA,EAAEQ,OAE7B,OAAOL,EAGJ,SAASM,IACZ,IAAK,IAAIN,EAAK,GAAIF,EAAI,EAAGA,EAAIS,UAAUC,OAAQV,IAC3CE,EAAKA,EAAGS,OAAOnB,EAAOiB,UAAUT,KACpC,OAAOE,EC3IX,IAAAU,EAAA,WAUE,SAAAA,EAA6BC,GAAAC,KAAAD,YAAAA,EAY/B,OAVED,EAAAG,UAAAC,YAAA,SAAYC,EAAaC,EAAsBC,OAGvCC,EAAM,IAAIC,EAAAA,YAAiB,OAAQJ,EAAKC,EAAKC,GAAW,IAC9D,OAAOL,KAAKD,YAAYS,OAAOF,GAAKG,KAClCC,EAAAA,OAAM,SAACzB,GAAK,OAAAA,aAAa0B,EAAAA,eACzBC,EAAAA,IAAG,SAA0BC,GAAoC,OAAAA,EAAaC,6BAVnFC,EAAAA,sDAPOC,EAAAA,eAqBRlB,EAtBA,MCCEmB,MAAA,EACAC,MAAA,EACAC,KAAA,EACAC,IAAA,EACAC,KAAA,EACAC,MAAA,EACAC,MAAA,EACAC,IAAA,+ICNF,IAAAC,EAAA,aCFAC,EAAA,WAKE,SAAAA,EAAqBC,GAAA3B,KAAA2B,OAAAA,EACnB3B,KAAK4B,QAAUD,EAwBnB,OArBED,EAAAzB,UAAA4B,aAAA,SAAaF,GACX3B,KAAK4B,QAAU5B,KAAK8B,OAAOH,IAG7BD,EAAAzB,UAAA8B,UAAA,WACE,OAAO/B,KAAK8B,OAAO9B,KAAK4B,UAOlBF,EAAAzB,UAAA6B,OAAR,SAAeE,OACPC,EAA4B,IAAIR,EAMtC,OAJAS,OAAOC,KAAKH,GAAQI,QAAO,SAAEC,GAC3BJ,EAAYI,GAAOL,EAAOK,KAGrBJ,GAEXP,EA9BA,GCAAY,EAAA,WAEA,SAAAA,KAsFA,OApFSA,EAAAC,kBAAP,SAAyBC,EAAmBC,EAAkBC,EAAkBC,GAG9E,OAAUH,EAAS,IAAIC,GAFHC,EAAW,KAAKA,EAAQ,IAAIC,EAAU,IAAM,KAK3DL,EAAAM,SAAP,SAAgBC,GACd,OAAQA,GACN,KAAKC,EAAe7B,MAClB,MAAO,OACT,KAAK6B,EAAe5B,MAClB,MAAO,OACT,KAAK4B,EAAe3B,KACpB,KAAK2B,EAAe1B,IAClB,MAAO,OACT,KAAK0B,EAAezB,KACpB,KAAKyB,EAAexB,MACpB,KAAKwB,EAAevB,MAClB,MAAO,MACT,KAAKuB,EAAetB,IACpB,QACE,SAQCc,EAAAS,iBAAP,eACQC,EAAG,IAAQC,MAAM,IAEvB,QAEQC,EAAaF,EAAIG,MAAMC,MAAM,MAAM,GAAGA,MAAM,KAG5CC,EAAiBH,EAAWA,EAAWtD,OAAS,GAAG0D,QAAQ,OAAQ,IAAIF,MAAM,KAEnF,MAAO,CACLV,SAAUW,EAAe,GACzBV,WAAYU,EAAe,IAE7B,MAAOpE,GACP,MAAO,CACLyD,SAAU,KACVC,WAAY,QAMXL,EAAAiB,eAAP,SAAsBC,GACpB,IACyB,iBAAZA,GAA0BA,aAAmBP,QACtDO,EAAUC,KAAKC,UAAUF,EAAS,KAAM,IAE1C,MAAOvE,GAEPuE,EAAU,0EAGZ,OAAOA,GAGFlB,EAAAqB,4BAAP,SAAmCC,GACjC,OAAmB,OAAfA,GAAuBA,IAAeC,UACjC,KAGFD,EAAWhD,IAAG,SAAEvB,EAAMyE,GAC3B,IAME,MAJoB,iBAATzE,GACToE,KAAKC,UAAUrE,GAGVA,EACP,MAAOJ,GACP,MAAO,kBAAkB6E,EAAG,0DAKpCxB,EAxFA,GCAAyB,EAAA,WACE,SAAAA,EACSrB,EACAC,EACAqB,GAFAhE,KAAA0C,SAAAA,EACA1C,KAAA2C,WAAAA,EACA3C,KAAAgE,aAAAA,EAKX,OAHED,EAAA9D,UAAAgE,SAAA,WACE,OAAOjE,KAAK0C,SAAW,IAAM1C,KAAK2C,WAAa,IAAM3C,KAAKgE,cAE9DD,EATA,gBCeE,SAAAG,EAAoBnE,GAAAC,KAAAD,YAAAA,EAHZC,KAAAmE,MAAsC,GACtCnE,KAAAoE,WAAyC,GA2JnD,OAnJiBF,EAAAG,aAAf,eACQ5E,EAAQ,IAAIwD,MAElB,IAEE,MAAMxD,EACN,MAAOR,GAEP,IACE,OAAOQ,EAAM0D,MAAMC,MAAM,MAAM,GAC/B,MAAOnE,GACP,OAAO,QAKEiF,EAAAI,YAAf,SAA2BC,OAGnBC,EADWD,EAAUE,UAAUF,EAAUG,YAAY,KAAQ,EAAGH,EAAUI,QAAQ,MAC7DvB,MAAM,KACjC,OAAyB,IAArBoB,EAAU5E,OACL,IAAImE,EAAYS,EAAU,IAAKA,EAAU,IAAKA,EAAU,IAE1D,IAAIT,EAAY,UAAW,EAAG,IAGxBG,EAAAU,qBAAf,SAAoCL,GAClC,OAAOA,EAAUE,UAAUF,EAAUI,QAAQ,KAAO,EAAGJ,EAAUI,QAAQ,OAG5DT,EAAAW,eAAf,SAA8BN,OACtBO,EAAOZ,EAAiBU,qBAAqBL,GAC7CQ,EAAcD,EAAKL,UAAU,EAAGK,EAAKJ,YAAY,MACvD,OAAOK,EAAYN,UAAU,EAAGM,EAAYL,YAAY,MAAQ,QAGnDR,EAAAc,WAAf,SAA0BC,EAAsBC,GAU9C,QANIC,EAAkB,EACpBC,EAAiB,EACjBC,EAAmB,EAEfC,EAAQL,EAAUM,SAASnC,MAAM,KAE9BoC,EAAY,EAAGA,EAAYF,EAAM1F,OAAQ4F,IAMhD,QAJIC,EAAsB,EAEpBC,EAAUJ,EAAME,GAAWpC,MAAM,KAE9BuC,EAAc,EAAGA,EAAcD,EAAQ9F,OAAQ+F,IAAe,KAC/DC,EAAiBC,EAAAA,OAAWH,EAAQC,IAU1C,GATIC,EAAehG,QAAU,IAE3B6F,GAAuBG,EAAe,GACtCT,GAAmBS,EAAe,GAClCR,GAAkBQ,EAAe,GACjCP,GAAoBO,EAAe,IAIjCJ,IAAcN,EAASvC,WAAY,CACrC,GAAI8C,IAAwBP,EAASlB,aAEnC,OAAO,IAAID,EAAYkB,EAAUa,QAAQX,GAAkBC,EAAgBC,GACtE,GAAIM,EAAc,IAAMD,EAAQ9F,OAErC,OAAO,IAAImE,EAAYkB,EAAUa,QAAQX,GAAkBC,EAAgB,IAMnF,OAAO,IAAIrB,EAAY,UAAW,EAAG,IAQ/BG,EAAAjE,UAAA8F,cAAR,SAAsBC,EAA2BC,GAAjD,IAAAC,EAAAlG,KACQM,EAAM,IAAIC,EAAAA,YAAuB,MAAOyF,GAE9C,OAAOhG,KAAKD,YAAYS,OAAOF,GAAKG,KAClCC,EAAAA,OAAM,SAACzB,GAAK,OAACA,aAAa0B,EAAAA,eAC1BC,EAAAA,IAAG,SAAsCC,GAA0C,OAAAA,EAAaC,OAChGF,EAAAA,IAAG,SAAyBqE,GAM1B,OAJKiB,EAAK/B,MAAMgC,eAAeH,KAC7BE,EAAK/B,MAAM6B,GAAqBf,GAG3Bf,EAAiBc,WAAWC,EAAWgB,KAEhDG,EAAAA,MAAM,GAENC,EAAAA,WAAU,WAER,OADAH,EAAK9B,WAAW4B,IAAqB,EAC9BM,EAAAA,GAAGL,OAWT/B,EAAAjE,UAAA8C,iBAAP,SAAwBwD,GAAxB,IAAAL,EAAAlG,KAGQuE,EAAYL,EAAiBG,eAGnC,OAAKE,EAIE+B,EAAAA,GAAG,CACRpC,EAAiBI,YAAYC,GAC7BL,EAAiBW,eAAeN,KAC/B9D,KACD+F,EAAAA,UAAS,SAAkDC,OAAAC,EAAAhI,EAAA+H,EAAA,GAACR,EAAAS,EAAA,GAAcV,EAAAU,EAAA,GAIxE,OAAKH,GAAqBL,EAAK9B,WAAW+B,eAAeH,GAChDM,EAAAA,GAAGL,GAKRC,EAAK/B,MAAMgC,eAAeH,GACrBM,EAAAA,GAAGpC,EAAiBc,WAAWkB,EAAK/B,MAAM6B,GAAoBC,IAIhEC,EAAKH,cAAcC,EAAmBC,MAtBxCK,EAAAA,GAAG,IAAIvC,EAAY,GAAI,EAAG,yBApItChD,EAAAA,sDANOC,EAAAA,eAsKRkD,KC1JayC,EAAS,CACpB,QACA,QACA,OACA,MACA,OACA,QACA,QACA,OAIFC,EAAA,WAWE,SAAAA,EAA6BC,EAAkDC,EACnEC,GADiB/G,KAAA6G,cAAAA,EAAkD7G,KAAA8G,YAAAA,EAJvE9G,KAAAgH,kBAA4B,EAMlChH,KAAKiH,MAAQC,WAAaA,UAAUC,cACU,IAAzCD,UAAUC,UAAUxC,QAAQ,UAAkBuC,UAAUC,UAAUC,MAAM,eAAgBF,UAAUC,UAAUC,MAAM,WAGvHpH,KAAK2B,OAAS,IAAID,EAAsBqF,GAExC/G,KAAKqH,SAAWrH,KAAKiH,MAAQjH,KAAKsH,OAAOC,KAAKvH,MAAQA,KAAKwH,WAAWD,KAAKvH,MAkL/E,OA9KS4G,EAAA3G,UAAAwH,MAAP,SAAajE,OAAS,IAAAI,EAAA,GAAA8D,EAAA,EAAAA,EAAA/H,UAAAC,OAAA8H,IAAA9D,EAAA8D,EAAA,GAAA/H,UAAA+H,GACpB1H,KAAK2H,KAAK7E,EAAe7B,MAAOuC,EAASI,IAGpCgD,EAAA3G,UAAA2H,MAAP,SAAapE,OAAS,IAAAI,EAAA,GAAA8D,EAAA,EAAAA,EAAA/H,UAAAC,OAAA8H,IAAA9D,EAAA8D,EAAA,GAAA/H,UAAA+H,GACpB1H,KAAK2H,KAAK7E,EAAe5B,MAAOsC,EAASI,IAGpCgD,EAAA3G,UAAA4H,KAAP,SAAYrE,OAAS,IAAAI,EAAA,GAAA8D,EAAA,EAAAA,EAAA/H,UAAAC,OAAA8H,IAAA9D,EAAA8D,EAAA,GAAA/H,UAAA+H,GACnB1H,KAAK2H,KAAK7E,EAAe3B,KAAMqC,EAASI,IAGnCgD,EAAA3G,UAAAG,IAAP,SAAWoD,OAAS,IAAAI,EAAA,GAAA8D,EAAA,EAAAA,EAAA/H,UAAAC,OAAA8H,IAAA9D,EAAA8D,EAAA,GAAA/H,UAAA+H,GAClB1H,KAAK2H,KAAK7E,EAAe1B,IAAKoC,EAASI,IAGlCgD,EAAA3G,UAAA6H,KAAP,SAAYtE,OAAS,IAAAI,EAAA,GAAA8D,EAAA,EAAAA,EAAA/H,UAAAC,OAAA8H,IAAA9D,EAAA8D,EAAA,GAAA/H,UAAA+H,GACnB1H,KAAK2H,KAAK7E,EAAezB,KAAMmC,EAASI,IAGnCgD,EAAA3G,UAAAR,MAAP,SAAa+D,OAAS,IAAAI,EAAA,GAAA8D,EAAA,EAAAA,EAAA/H,UAAAC,OAAA8H,IAAA9D,EAAA8D,EAAA,GAAA/H,UAAA+H,GACpB1H,KAAK2H,KAAK7E,EAAexB,MAAOkC,EAASI,IAGpCgD,EAAA3G,UAAA8H,MAAP,SAAavE,OAAS,IAAAI,EAAA,GAAA8D,EAAA,EAAAA,EAAA/H,UAAAC,OAAA8H,IAAA9D,EAAA8D,EAAA,GAAA/H,UAAA+H,GACpB1H,KAAK2H,KAAK7E,EAAevB,MAAOiC,EAASI,IAGpCgD,EAAA3G,UAAA+H,qBAAP,SAA4BC,GAC1BjI,KAAKkI,mBAAqBD,GAGrBrB,EAAA3G,UAAAkI,gBAAP,SAAuBC,GACrBpI,KAAKqI,cAAgBD,GAGhBxB,EAAA3G,UAAAqI,8BAAP,SAAqCC,GACnCvI,KAAKgH,iBAAmBuB,GAGnB3B,EAAA3G,UAAAuI,gBAAP,SAAuBC,GACrBzI,KAAK0I,eAAiBD,GAGjB7B,EAAA3G,UAAA4B,aAAP,SAAoBF,GAClB3B,KAAK2B,OAAOE,aAAaF,IAGpBiF,EAAA3G,UAAA0I,kBAAP,WACE,OAAO3I,KAAK2B,OAAOI,aAGb6E,EAAA3G,UAAAqH,OAAR,SAAezE,EAAuB+F,EAAoBpF,EAAiBI,GAMzE,OAFAA,EAAaA,GAAc,GAEnBf,GACN,KAAKC,EAAezB,KAClBwH,QAAQf,KAAIgB,MAAZD,QAAOnJ,EAAA,CAASkJ,EAAU,IAAKpF,GAAYI,IAC3C,MACF,KAAKd,EAAexB,MACpB,KAAKwB,EAAevB,MAClBsH,QAAQpJ,MAAKqJ,MAAbD,QAAOnJ,EAAA,CAAUkJ,EAAU,IAAKpF,GAAYI,IAC5C,MACF,KAAKd,EAAe3B,KAClB0H,QAAQhB,KAAIiB,MAAZD,QAAOnJ,EAAA,CAASkJ,EAAU,IAAKpF,GAAYI,IAC3C,MACF,QACEiF,QAAQzI,IAAG0I,MAAXD,QAAOnJ,EAAA,CAAQkJ,EAAU,IAAKpF,GAAYI,MAIxCgD,EAAA3G,UAAAuH,WAAR,SAAmB3E,EAAuB+F,EAAoBpF,EAAiBI,OAEvEmF,EAAQzG,EAAeM,SAASC,GAKtC,OAFAe,EAAaA,GAAc,GAEnBf,GACN,KAAKC,EAAezB,KAClBwH,QAAQf,KAAIgB,MAAZD,QAAOnJ,EAAA,CAAM,KAAKkJ,EAAc,SAASG,EAASvF,GAAYI,IAC9D,MACF,KAAKd,EAAexB,MACpB,KAAKwB,EAAevB,MAClBsH,QAAQpJ,MAAKqJ,MAAbD,QAAOnJ,EAAA,CAAO,KAAKkJ,EAAc,SAASG,EAASvF,GAAYI,IAC/D,MACF,KAAKd,EAAe3B,KAClB0H,QAAQhB,KAAIiB,MAAZD,QAAOnJ,EAAA,CAAM,KAAKkJ,EAAc,SAASG,EAASvF,GAAYI,IAC9D,MAWF,QACEiF,QAAQzI,IAAG0I,MAAXD,QAAOnJ,EAAA,CAAK,KAAKkJ,EAAc,SAASG,EAASvF,GAAYI,MAI3DgD,EAAA3G,UAAA0H,KAAR,SAAa9E,EAAuBW,EAASI,EAAwB1D,GAArE,IAAAgG,EAAAlG,UAA6C,IAAA4D,IAAAA,EAAA,SAAwB,IAAA1D,IAAAA,GAAA,OAC7DyB,EAAS3B,KAAK2B,OAAOI,YACrBiH,EAAe9I,GAAeyB,EAAOsH,kBAAoBpG,GAASlB,EAAOuH,eACzEC,EAAoBtG,GAASlB,EAAOkB,MAE1C,GAAMW,IAAYwF,GAAgBG,GAAlC,KAIMC,EAAiBzC,EAAO9D,GAE9BW,EAAUlB,EAAeiB,eAAeC,OAGlC6F,EAAgC/G,EAAeqB,4BAA4BC,GAE3EpB,GAAY,IAAI8G,MAAOC,cAG7BvJ,KAAK6G,cAAc9D,iBAAiBpB,EAAO6H,kBAAkBC,UAAS,SAAEC,OAChEC,EAA6B,CACjCnG,QAASA,EACTI,WAAYyF,EACZxG,MAAOA,EACPL,UAAWA,EACXE,SAAUgH,EAAchH,SACxBC,WAAY+G,EAAc/G,WAAWsB,YAOvC,GAJIiC,EAAKwC,gBAAkBS,GACzBjD,EAAKwC,eAAekB,MAAMD,GAGxBX,EAAc,CAEhBxF,EAAUA,aAAmBP,MAAQO,EAAQL,MAAQK,EACrDmG,EAAUnG,QAAUA,MAEdyE,EAAU/B,EAAKgC,oBAAsB,IAAI2B,EAAAA,YAC/C5B,EAAQ6B,IAAI,eAAgB,wBAEtBzJ,EAAU,CACd4H,QAASA,EACTG,OAAQlC,EAAKmC,eAAiB,IAAI0B,EAAAA,WAClCC,aAAcrI,EAAOsI,kBAAoB,OACzC1B,gBAAiBrC,EAAKc,kBAGxBd,EAAKY,YAAY5G,YAAYyB,EAAOsH,iBAAkBU,EAAWtJ,GAASoJ,UAAS,SAAES,KAElF,SACAzK,GACCyG,EAAKyB,KAAK7E,EAAexB,MAAO,4BAA4BkC,EAAW,CAAC/D,IAAQ,KAOtF,GAAI0J,IAAsBxH,EAAOwI,sBAAuB,KAChDvB,EAAatG,EAAeC,kBAAkBC,EAAW4G,EAC7DM,EAAchH,SAAUgH,EAAc/G,WAAWsB,YAEnD,OAAOiC,EAAKmB,SAASxE,EAAO+F,EAAYpF,EAASI,4BAjMxD7C,EAAAA,sDAdQmD,SARApE,SAGA2B,KAwNTmF,EArMA,GCdAwD,EAAA,WAGE,SAAAA,EAA6BvD,EACAC,GADA9G,KAAA6G,cAAAA,EACA7G,KAAA8G,YAAAA,EAe/B,OAZEsD,EAAAnK,UAAAoK,OAAA,SAAO1I,EAAsBmF,EAAoCwD,EAC1DzD,OAEC0D,EAAS,IAAI3D,EAAUC,GAAiB7G,KAAK6G,cACjDC,GAAe9G,KAAK8G,YAAanF,GAMnC,OAJI2I,GACFC,EAAO/B,gBAAgB8B,GAGlBC,uBAjBVxJ,EAAAA,sDANOmD,SAHApE,KA4BRsK,EAnBA,GCZAI,EAAA,WASA,SAAAA,KAmCA,OAvBSA,EAAAC,QAAP,SAAe9I,GACb,MAAO,CACL+I,SAAUF,EACVG,UAAW,CACT,CAACC,QAASnJ,EAAcoJ,SAAUlJ,GAAU,IAC5CiF,EACA9G,EACAsK,EACAlG,KAICsG,EAAAM,SAAP,WACE,MAAO,CACLJ,SAAUF,EACVG,UAAW,CACT/D,EACA9G,EACAsK,EACAlG,yBA/BP6G,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CACPC,EAAAA,cAEFP,UAAW,CACT/D,EACA9G,EACAsK,EACAlG,OA2BJsG,EA5CA,KCEA,aCAAW,EAAA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport { NGXLogInterface } from './types/ngx-log.interface';\n\n\n\n@Injectable()\nexport class NGXLoggerHttpService {\n  constructor(private readonly httpBackend: HttpBackend) { }\n\n  logOnServer(url: string, log: NGXLogInterface, options: object): Observable<any> {\n    // HttpBackend skips all HttpInterceptors\n    // They may log errors using this service causing circular calls\n    const req = new HttpRequest<any>('POST', url, log, options || {});\n    return this.httpBackend.handle(req).pipe(\n      filter(e => e instanceof HttpResponse),\n      map<HttpResponse<any>, any>((httpResponse: HttpResponse<any>) => httpResponse.body)\n    );\n  }\n\n}\n","export enum NgxLoggerLevel {\n  TRACE = 0,\n  DEBUG,\n  INFO,\n  LOG,\n  WARN,\n  ERROR,\n  FATAL,\n  OFF\n}\n","import {NgxLoggerLevel} from './types/logger-level.enum';\n\nexport class LoggerConfig {\n  level: NgxLoggerLevel;\n  serverLogLevel?: NgxLoggerLevel;\n  serverLoggingUrl?: string;\n  disableConsoleLogging?: boolean;\n  httpResponseType?: 'arraybuffer' | 'blob' | 'text' | 'json';\n  enableSourceMaps?: boolean;\n}\n","import {LoggerConfig} from './logger.config';\n\nexport class NGXLoggerConfigEngine {\n\n  private _config;\n  constructor(readonly config: LoggerConfig) {\n    this._config = config;\n  }\n\n  updateConfig(config: LoggerConfig) {\n    this._config = this._clone(config);\n  }\n\n  getConfig() {\n    return this._clone(this._config);\n  }\n\n\n  // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)\n  // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make\n  // this a deep clone\n  private _clone(object: any) {\n    const cloneConfig: LoggerConfig = new LoggerConfig();\n\n    Object.keys(object).forEach((key) => {\n      cloneConfig[key] = object[key];\n    });\n\n    return cloneConfig;\n  }\n}\n","import {NgxLoggerLevel} from '../types/logger-level.enum';\n\nexport class NGXLoggerUtils {\n\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\n\n    return `${timestamp} ${logLevel}${fileDetails}`;\n  }\n\n  static getColor(level: NgxLoggerLevel): 'blue' | 'teal' | 'gray' | 'red' | undefined {\n    switch (level) {\n      case NgxLoggerLevel.TRACE:\n        return 'blue';\n      case NgxLoggerLevel.DEBUG:\n        return 'teal';\n      case NgxLoggerLevel.INFO:\n      case NgxLoggerLevel.LOG:\n        return 'gray';\n      case NgxLoggerLevel.WARN:\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        return 'red';\n      case NgxLoggerLevel.OFF:\n      default:\n        return;\n    }\n  }\n\n\n  /**\n   *  This allows us to see who called the logger\n   */\n  static getCallerDetails(): { lineNumber: string, fileName: string } {\n    const err = (new Error(''));\n\n    try {\n      // this should produce the line which NGX Logger was called\n      const callerLine = err.stack.split('\\n')[4].split('/');\n\n      // returns the file:lineNumber\n      const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');\n\n      return {\n        fileName: fileLineNumber[0],\n        lineNumber: fileLineNumber[1]\n      };\n    } catch (e) {\n      return {\n        fileName: null,\n        lineNumber: null\n      };\n    }\n\n  }\n\n  static prepareMessage(message) {\n    try {\n      if (typeof message !== 'string' && !(message instanceof Error)) {\n        message = JSON.stringify(message, null, 2);\n      }\n    } catch (e) {\n      // additional = [message, ...additional];\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n    }\n\n    return message;\n  }\n\n  static prepareAdditionalParameters(additional: any[]) {\n    if (additional === null || additional === undefined) {\n      return null;\n    }\n\n    return additional.map((next, idx) => {\n      try {\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\n        if (typeof next === 'object') {\n          JSON.stringify(next);\n        }\n\n        return next;\n      } catch (e) {\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`;\n      }\n    });\n  }\n\n}\n","export class LogPosition {\n  constructor(\n    public fileName: string,\n    public lineNumber: number,\n    public columnNumber: number\n  ) {}\n  toString() {\n    return this.fileName + ':' + this.lineNumber + ':' + this.columnNumber;\n  }\n}\n","import {SourceMap} from '@angular/compiler';\nimport {Injectable} from '@angular/core';\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\nimport * as vlq from 'vlq';\nimport {Observable, of} from 'rxjs';\nimport {catchError, filter, map, retry, switchMap} from 'rxjs/operators';\nimport {LogPosition} from './types/log-position';\n\n@Injectable()\nexport class NGXMapperService {\n\n  // used to cache source maps\n  private cache: { [key: string]: SourceMap } = {};\n  private errorCache: { [key: string]: boolean } = {};\n\n  constructor(private httpBackend: HttpBackend) {\n  }\n\n  /*\n  Static Functions\n */\n  private static getStackLine(): string {\n    const error = new Error();\n\n    try {\n      // noinspection ExceptionCaughtLocallyJS\n      throw error;\n    } catch (e) {\n\n      try {\n        return error.stack.split('\\n')[5];\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  private static getPosition(stackLine: string): LogPosition {\n    // strip base path, then parse filename, line, and column\n    const position = stackLine.substring(stackLine.lastIndexOf('\\/') + 1, stackLine.indexOf(')'));\n    const dataArray = position.split(':');\n    if (dataArray.length === 3) {\n      return new LogPosition(dataArray[0], +dataArray[1], +dataArray[2]);\n    }\n    return new LogPosition('unknown', 0, 0);\n  }\n\n  private static getTranspileLocation(stackLine: string): string {\n    return stackLine.substring(stackLine.indexOf('(') + 1, stackLine.indexOf(')'));\n  }\n\n  private static getMapFilePath(stackLine: string): string {\n    const file = NGXMapperService.getTranspileLocation(stackLine);\n    const mapFullPath = file.substring(0, file.lastIndexOf(':'));\n    return mapFullPath.substring(0, mapFullPath.lastIndexOf(':')) + '.map';\n  }\n\n  private static getMapping(sourceMap: SourceMap, position: LogPosition): LogPosition {\n    // => ';' indicates end of a line\n    // => ',' separates mappings in a line\n    // decoded mapping => [ generatedCodeColumn, sourceFileIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]\n    let sourceFileIndex = 0,   // second field\n      sourceCodeLine = 0,    // third field\n      sourceCodeColumn = 0;  // fourth field\n\n    const lines = sourceMap.mappings.split(';');\n\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n      // reset column position to 0 after each line\n      let generatedCodeColumn = 0;\n      // decode sections in line\n      const columns = lines[lineIndex].split(',');\n\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n        const decodedSection = vlq.decode(columns[columnIndex]);\n        if (decodedSection.length >= 4) {\n          // update relative positions\n          generatedCodeColumn += decodedSection[0];\n          sourceFileIndex += decodedSection[1];\n          sourceCodeLine += decodedSection[2];\n          sourceCodeColumn += decodedSection[3];\n        }\n\n        // check if matching map\n        if (lineIndex === position.lineNumber) {\n          if (generatedCodeColumn === position.columnNumber) {\n            // matching column and line found\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, sourceCodeColumn);\n          } else if (columnIndex + 1 === columns.length) {\n            // matching column not found, but line is correct\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, 0);\n          }\n        }\n      }\n    }\n    // failed if reached\n    return new LogPosition('unknown', 0, 0);\n  }\n\n  /**\n   * does the http get request to get the source map\n   * @param sourceMapLocation\n   * @param distPosition\n   */\n  private _getSourceMap(sourceMapLocation: string, distPosition: LogPosition): Observable<LogPosition> {\n    const req = new HttpRequest<SourceMap>('GET', sourceMapLocation);\n\n    return this.httpBackend.handle(req).pipe(\n      filter(e => (e instanceof HttpResponse)),\n      map<HttpResponse<SourceMap>, SourceMap>((httpResponse: HttpResponse<SourceMap>) => httpResponse.body),\n      map<SourceMap, LogPosition>(sourceMap => {\n        // store file in cache if not already stored\n        if (!this.cache.hasOwnProperty(sourceMapLocation)) {\n          this.cache[sourceMapLocation] = sourceMap;\n        }\n        // map generated position to source position\n        return NGXMapperService.getMapping(sourceMap, distPosition);\n      }),\n      retry(3),\n      // if there is an error getting the source, map fall back to the filename and line number of\n      catchError(() => {\n        this.errorCache[sourceMapLocation] = true;\n        return of(distPosition);\n      })\n    );\n  }\n\n  /**\n   * Returns the LogPosition for the current log\n   * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name\n   * and number of the call\n   * @param sourceMapsEnabled\n   */\n  public getCallerDetails(sourceMapsEnabled: boolean): Observable<LogPosition> {\n    // parse generated file mapping from stack trace\n\n    const stackLine = NGXMapperService.getStackLine();\n\n    // if we were not able to parse the stackLine, just return an empty Log Position\n    if (!stackLine) {\n      return of(new LogPosition('', 0, 0));\n    }\n\n    return of([\n      NGXMapperService.getPosition(stackLine),\n      NGXMapperService.getMapFilePath(stackLine)\n    ]).pipe(\n      switchMap<[LogPosition, string], Observable<LogPosition>>(([distPosition, sourceMapLocation]) => {\n\n        // if source maps are not enabled, or if we've previously tried to get the source maps, but they failed,\n        // then just use the position of the JS instead of the source\n        if (!sourceMapsEnabled || this.errorCache.hasOwnProperty(sourceMapLocation)) {\n          return of(distPosition);\n        }\n\n\n        // check if we have map has already, otherwise request from server\n        if (this.cache.hasOwnProperty(sourceMapLocation)) {\n          return of(NGXMapperService.getMapping(this.cache[sourceMapLocation], distPosition));\n        }\n\n        // finally try to get the source map and return the position\n        return this._getSourceMap(sourceMapLocation, distPosition);\n      })\n    );\n\n\n  }\n}\n\n\n\n\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { NGXLoggerHttpService } from './http.service';\nimport {LogPosition} from './types/log-position';\nimport { NgxLoggerLevel } from './types/logger-level.enum';\nimport { LoggerConfig } from './logger.config';\nimport { NGXLoggerConfigEngine } from './config.engine';\nimport { NGXLoggerUtils } from './utils/logger.utils';\nimport { NGXLoggerMonitor } from './logger-monitor';\nimport { NGXLogInterface } from './types/ngx-log.interface';\nimport { NGXMapperService } from './mapper.service';\n\nexport const Levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'LOG',\n  'WARN',\n  'ERROR',\n  'FATAL',\n  'OFF'\n];\n\n\n@Injectable()\nexport class NGXLogger {\n  private readonly _isIE: boolean;\n  private readonly _logFunc: Function;\n  private config: NGXLoggerConfigEngine;\n  private _customHttpHeaders: HttpHeaders;\n  private _customParams: HttpParams;\n  private _withCredentials: boolean = false;\n\n  private _loggerMonitor: NGXLoggerMonitor;\n\n  constructor(private readonly mapperService: NGXMapperService, private readonly httpService: NGXLoggerHttpService,\n              loggerConfig: LoggerConfig) {\n    this._isIE = navigator && navigator.userAgent &&\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n\n    // each instance of the logger should have their own config engine\n    this.config = new NGXLoggerConfigEngine(loggerConfig);\n\n    this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);\n\n  }\n\n  public trace(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.TRACE, message, additional);\n  }\n\n  public debug(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\n  }\n\n  public info(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.INFO, message, additional);\n  }\n\n  public log(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.LOG, message, additional);\n  }\n\n  public warn(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.WARN, message, additional);\n  }\n\n  public error(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.ERROR, message, additional);\n  }\n\n  public fatal(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.FATAL, message, additional);\n  }\n\n  public setCustomHttpHeaders(headers: HttpHeaders) {\n    this._customHttpHeaders = headers;\n  }\n\n  public setCustomParams(params: HttpParams) {\n    this._customParams = params;\n  }\n\n  public setWithCredentialsOptionValue(withCredentials: boolean) {\n    this._withCredentials = withCredentials;\n  }\n\n  public registerMonitor(monitor: NGXLoggerMonitor) {\n    this._loggerMonitor = monitor;\n  }\n\n  public updateConfig(config: LoggerConfig) {\n    this.config.updateConfig(config);\n  }\n\n  public getConfigSnapshot(): LoggerConfig {\n    return this.config.getConfig();\n  }\n\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    // Coloring doesn't work in IE\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`${metaString} `, message, ...additional);\n        break;\n      default:\n        console.log(`${metaString} `, message, ...additional);\n    }\n  }\n\n  private _logModern(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    const color = NGXLoggerUtils.getColor(level);\n\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of\n      // the console.trace statement\n      // case NgxLoggerLevel.TRACE:\n      //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n\n      //  Disabling console.debug, because Has this hidden by default.\n      // case NgxLoggerLevel.DEBUG:\n      //   console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n      default:\n        console.log(`%c${metaString}`, `color:${color}`, message, ...additional);\n    }\n  }\n\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\n    const config = this.config.getConfig();\n    const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;\n    const isLogLevelEnabled = level >= config.level;\n\n    if (!(message && (isLog2Server || isLogLevelEnabled))) {\n      return;\n    }\n\n    const logLevelString = Levels[level];\n\n    message = NGXLoggerUtils.prepareMessage(message);\n\n    // only use validated parameters for HTTP requests\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\n\n    const timestamp = new Date().toISOString();\n\n    // const callerDetails = NGXLoggerUtils.getCallerDetails();\n    this.mapperService.getCallerDetails(config.enableSourceMaps).subscribe((callerDetails: LogPosition) => {\n      const logObject: NGXLogInterface = {\n        message: message,\n        additional: validatedAdditionalParameters,\n        level: level,\n        timestamp: timestamp,\n        fileName: callerDetails.fileName,\n        lineNumber: callerDetails.lineNumber.toString()\n      };\n\n      if (this._loggerMonitor && isLogLevelEnabled) {\n        this._loggerMonitor.onLog(logObject);\n      }\n\n      if (isLog2Server) {\n        // make sure the stack gets sent to the server\n        message = message instanceof Error ? message.stack : message;\n        logObject.message = message;\n\n        const headers = this._customHttpHeaders || new HttpHeaders();\n        headers.set('Content-Type', 'application/json');\n\n        const options = {\n          headers: headers,\n          params: this._customParams || new HttpParams(),\n          responseType: config.httpResponseType || 'json',\n          withCredentials: this._withCredentials\n        };\n        // Allow logging on server even if client log level is off\n        this.httpService.logOnServer(config.serverLoggingUrl, logObject, options).subscribe((res: any) => {\n            // I don't think we should do anything on success\n          },\n          (error: HttpErrorResponse) => {\n            this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\n          }\n        );\n      }\n\n\n      // if no message or the log level is less than the environ\n      if (isLogLevelEnabled && !config.disableConsoleLogging) {\n        const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString,\n          callerDetails.fileName, callerDetails.lineNumber.toString());\n\n        return this._logFunc(level, metaString, message, additional);\n      }\n    });\n  }\n}\n","import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\n\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXLogger} from './logger.service';\nimport {NGXLoggerMonitor} from './logger-monitor';\nimport {NGXMapperService} from './mapper.service';\n\n\n/**\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\n */\n@Injectable()\nexport class CustomNGXLoggerService {\n\n  constructor(private readonly mapperService: NGXMapperService,\n              private readonly httpService: NGXLoggerHttpService) {\n  }\n\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService, logMonitor?: NGXLoggerMonitor,\n         mapperService?: NGXMapperService): NGXLogger {\n    // you can inject your own httpService or use the default,\n    const logger = new NGXLogger(mapperService || this.mapperService,\n      httpService || this.httpService, config);\n\n    if (logMonitor) {\n      logger.registerMonitor(logMonitor);\n    }\n\n    return logger;\n  }\n}\n\n\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NGXLogger} from './logger.service';\nimport {LoggerConfig} from './logger.config';\nimport {CustomNGXLoggerService} from './custom-logger.service';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXMapperService} from './mapper.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    NGXLogger,\n    NGXLoggerHttpService,\n    CustomNGXLoggerService,\n    NGXMapperService\n  ]\n})\nexport class LoggerModule {\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        {provide: LoggerConfig, useValue: config || {}},\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService,\n        NGXMapperService\n      ]\n    };\n  }\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService,\n        NGXMapperService\n      ]\n    };\n  }\n}\n","import {NGXLogInterface} from './types/ngx-log.interface';\n\nexport abstract class NGXLoggerMonitor {\n  abstract onLog(logObject: NGXLogInterface): void;\n}\n","import {NgxLoggerLevel} from './logger-level.enum';\n\nexport class NGXLogInterface {\n  level: NgxLoggerLevel;\n  timestamp: string;\n  fileName: string;\n  lineNumber: string;\n  message: string;\n  additional: any[];\n}\n"]}