{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular-oauth2-oidc/types.ts","ng://angular-oauth2-oidc/base64-helper.ts","ng://angular-oauth2-oidc/token-validation/validation-handler.ts","ng://angular-oauth2-oidc/url-helper.service.ts","ng://angular-oauth2-oidc/events.ts","ng://angular-oauth2-oidc/auth.config.ts","ng://angular-oauth2-oidc/encoder.ts","ng://angular-oauth2-oidc/token-validation/crypto-handler.ts","ng://angular-oauth2-oidc/oauth-service.ts","ng://angular-oauth2-oidc/oauth-module.config.ts","ng://angular-oauth2-oidc/interceptors/resource-server-error-handler.ts","ng://angular-oauth2-oidc/interceptors/default-oauth.interceptor.ts","ng://angular-oauth2-oidc/token-validation/null-validation-handler.ts","ng://angular-oauth2-oidc/factories.ts","ng://angular-oauth2-oidc/token-validation/jwks-validation-handler.ts","ng://angular-oauth2-oidc/angular-oauth-oidic.module.ts","ng://angular-oauth2-oidc/tokens.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__values","o","m","i","__read","r","ar","error","preventClearHashAfterLogin","b64DecodeUnicode","str","base64","replace","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","base64UrlEncode","btoa","AbstractValidationHandler","validateAtHash","params","hashAlg","inferHashAlgorithm","idTokenHeader","calcHash","accessToken","tokenHash","_a","leftMostHalf","substr","atHash","claimsAtHash","idTokenClaims","console","jwtHeader","alg","match","Error","UrlHelperService","getHashFragmentParams","customHashFragment","hash","window","location","indexOf","questionMarkPosition","parseQueryString","queryString","pairs","pair","separatorIndex","escapedKey","escapedValue","key","data","Injectable","type","OAuthSuccessEvent","info","_this","_super","tslib_1.__extends","OAuthEvent","OAuthInfoEvent","OAuthErrorEvent","reason","AuthConfig","json","clientId","redirectUri","postLogoutRedirectUri","loginUrl","scope","resource","rngUrl","oidc","requestAccessToken","options","issuer","logoutUrl","clearHashAfterLogin","tokenEndpoint","userinfoEndpoint","responseType","showDebugInformation","silentRefreshRedirectUri","silentRefreshMessagePrefix","silentRefreshShowIFrame","siletRefreshTimeout","silentRefreshTimeout","dummyClientSecret","requireHttps","strictDiscoveryDocumentValidation","jwks","customQueryParams","silentRefreshIFrameName","timeoutFactor","sessionChecksEnabled","sessionCheckIntervall","sessionCheckIFrameUrl","sessionCheckIFrameName","disableAtHashCheck","skipSubjectCheck","useIdTokenHintForSilentRefresh","skipIssuerCheck","nonceStateSeparator","useHttpBasicAuth","disablePKCE","openUri","uri","href","assign","WebHttpUrlEncodingCodec","encodeKey","k","encodeURIComponent","encodeValue","decodeKey","decodeValue","OAuthService","ngZone","http","storage","tokenValidationHandler","config","urlHelper","logger","crypto","discoveryDocumentLoaded","state","eventsSubject","Subject","discoveryDocumentLoadedSubject","grantTypesSupported","inImplicitFlow","debug","discoveryDocumentLoaded$","asObservable","events","configure","setStorage","sessionStorage","setupRefreshTimer","setupSessionCheck","configChanged","restartSessionChecksIfStillLoggedIn","hasValidIdToken","initSessionCheck","restartRefreshTimerIfStillLoggedIn","setupExpirationTimers","pipe","filter","subscribe","setupAutomaticSilentRefresh","listenTo","noPrompt","shouldRunSilentRefresh","tap","refreshInternal","catch","refreshToken","silentRefresh","loadDiscoveryDocumentAndTryLogin","loadDiscoveryDocument","doc","tryLogin","loadDiscoveryDocumentAndLogin","hasValidAccessToken","initImplicitFlow","args","_i","arguments","validateUrlFromDiscoveryDocument","url","errors","httpsCheck","validateUrlForHttps","issuerCheck","validateUrlAgainstIssuer","lcUrl","toLowerCase","startsWith","clearAccessTokenTimer","clearIdTokenTimer","idTokenExp","getIdTokenExpiration","Number","MAX_VALUE","useAccessTokenExp","getAccessTokenExpiration","setupAccessTokenTimer","setupIdTokenTimer","expiration","storedAt","getAccessTokenStoredAt","timeout","calcTimeout","runOutsideAngular","accessTokenTimeoutSubscription","of","delay","run","getIdTokenStoredAt","idTokenTimeoutSubscription","unsubscribe","now","Date","delta","Math","max","_storage","fullUrl","endsWith","get","validateDiscoveryDocument","authorization_endpoint","end_session_endpoint","grant_types_supported","token_endpoint","userinfo_endpoint","jwksUri","jwks_uri","check_session_iframe","loadJwks","event","discoveryDocument","err","warn","fetchTokenUsingPasswordFlowAndLoadUserProfile","userName","password","headers","HttpHeaders","fetchTokenUsingPasswordFlow","loadUserProfile","set","getAccessToken","existingClaims","getIdentityClaims","sub","setItem","JSON","stringify","HttpParams","encoder","header","_b","tslib_1.__values","getOwnPropertyNames","_c","post","tokenResponse","storeAccessTokenResponse","access_token","refresh_token","expires_in","getItem","switchMap","id_token","from","processIdToken","storeIdToken","removeSilentRefreshEventListener","silentRefreshPostMessageEventListener","removeEventListener","setupSilentRefreshEventListener","message","processMessageEventMessage","onLoginError","onTokenReceived","addEventListener","claims","getIdToken","document","existingIframe","getElementById","removeChild","silentRefreshSubject","iframe","createElement","id","createLoginUrl","setAttribute","style","appendChild","first","success","race","toPromise","initImplicitFlowInPopup","display","windowRef","open","calculatePopupFeatures","cleanup","listener","close","height","width","left","screen","expectedPrefix","prefixedMessage","canPerformSessionCheck","getSessionState","setupSessionCheckEventListener","removeSessionCheckEventListener","sessionCheckEventListener","origin","handleSessionUnchanged","handleSessionChange","handleSessionError","stopSessionCheckTimer","waitForSilentRefreshAfterSessionChange","logOut","startSessionCheckTimer","sessionCheckTimer","setInterval","checkSession","bind","clearInterval","sessionState","contentWindow","postMessage","loginHint","customRedirectUri","that","createAndSaveNonce","nonce","_h","seperationChar","createChallangeVerifierPairForPKCE","tslib_1.__read","challenge","verifier","_d","keys","_e","_f","_g","initImplicitFlowInternal","additionalState","addParams","resetImplicitFlow","callOnTokenReceivedIfExists","tokenParams","idClaims","idToken","expiresIn","grantedScopes","expiresInMilliSeconds","expiresAt","getTime","tryLoginCodeFlow","tryLoginImplicitFlow","charAt","parts","search","code","history","replaceState","name","parseState","nonceInState","userState","handleLoginError","validateNonce","event_1","getTokenFromCode","pkciVerifier","fetchAndProcessToken","disableOAuth2StateCheck","event_2","fallbackAccessTokenExpirationTimeInSec","validationHandler","storeSessionState","idx","savedNonce","idTokenClaimsJson","idTokenExpiresAt","skipNonceCheck","tokenParts","headerJson","padBase64","parse","claimsJson","isArray","aud","every","iat","iss","issuedAtMSec","expiresAtMSec","exp","clockSkewInMSec","clockSkewInSec","validationParams","loadKeys","checkAtHash","atHashValid","checkSignature","idTokenHeaderJson","getGrantedScopes","scopes","base64data","getRefreshToken","parseInt","authorizationHeader","noRedirectToLogoutUrl","removeItem","postLogoutUrl","createNonce","ngOnDestroy","size","self","bytes","getRandomValues","Uint8Array","random","validateSignature","initLoginFlow","initCodeFlow","initCodeFlowInternal","challengeRaw","NgZone","HttpClient","OAuthStorage","decorators","Optional","ValidationHandler","OAuthLogger","CryptoHandler","OAuthNoopResourceServerErrorHandler","handleError","throwError","DefaultOAuthInterceptor","authStorage","oAuthService","errorHandler","moduleConfig","checkUrl","resourceServer","customUrlValidation","allowedUrls","find","u","intercept","req","handle","sendAccessToken","merge","token","take","mergeMap","clone","catchError","OAuthResourceServerErrorHandler","OAuthModuleConfig","NullValidationHandler","createDefaultLogger","createDefaultStorage","JwksValidationHandler","allowedAlgorithms","gracePeriodInSec","retry","kid","kty_1","alg2kty","matchingKeys","loadedKeys","keyObj","rs.KEYUTIL","getKey","validationOptions","gracePeriod","rs.KJUR","jws","JWS","verifyJWT","valueToHash","algorithm","MessageDigest","digestString","byteArrayAsString","toByteArrayAsString","hexString","hexDigit","num","String","fromCharCode","OAuthModule","forRoot","validationHandlerClass","ngModule","providers","provide","useFactory","useClass","useValue","HTTP_INTERCEPTORS","multi","NgModule","imports","CommonModule","declarations","exports","AUTH_CONFIG","InjectionToken"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * Additional options that can be passt to tryLogin.\r\n */\r\nexport class LoginOptions {\r\n  /**\r\n   * Is called, after a token has been received and\r\n   * successfully validated.\r\n   *\r\n   * Deprecated:  Use property ``events`` on OAuthService instead.\r\n   */\r\n  onTokenReceived?: (receivedTokens: ReceivedTokens) => void;\r\n\r\n  /**\r\n   * Hook, to validate the received tokens.\r\n   *\r\n   * Deprecated:  Use property ``tokenValidationHandler`` on OAuthService instead.\r\n   */\r\n  validationHandler?: (receivedTokens: ReceivedTokens) => Promise<any>;\r\n\r\n  /**\r\n   * Called when tryLogin detects that the auth server\r\n   * included an error message into the hash fragment.\r\n   *\r\n   * Deprecated:  Use property ``events`` on OAuthService instead.\r\n   */\r\n  onLoginError?: (params: object) => void;\r\n\r\n  /**\r\n   * A custom hash fragment to be used instead of the\r\n   * actual one. This is used for silent refreshes, to\r\n   * pass the iframes hash fragment to this method.\r\n   */\r\n  customHashFragment?: string;\r\n\r\n  /**\r\n   * Set this to true to disable the oauth2 state\r\n   * check which is a best practice to avoid\r\n   * security attacks.\r\n   * As OIDC defines a nonce check that includes\r\n   * this, this can be set to true when only doing\r\n   * OIDC.\r\n   */\r\n  disableOAuth2StateCheck?: boolean;\r\n\r\n  /**\r\n   * Normally, you want to clear your hash fragment after\r\n   * the lib read the token(s) so that they are not displayed\r\n   * anymore in the url. If not, set this to true.\r\n   */\r\n  preventClearHashAfterLogin? = false;\r\n}\r\n\r\n/**\r\n * Defines the logging interface the OAuthService uses\r\n * internally. Is compatible with the `console` object,\r\n * but you can provide your own implementation as well\r\n * through dependency injection.\r\n */\r\nexport abstract class OAuthLogger {\r\n  abstract debug(message?: any, ...optionalParams: any[]): void;\r\n  abstract info(message?: any, ...optionalParams: any[]): void;\r\n  abstract log(message?: any, ...optionalParams: any[]): void;\r\n  abstract warn(message?: any, ...optionalParams: any[]): void;\r\n  abstract error(message?: any, ...optionalParams: any[]): void;\r\n}\r\n\r\n/**\r\n * Defines a simple storage that can be used for\r\n * storing the tokens at client side.\r\n * Is compatible to localStorage and sessionStorage,\r\n * but you can also create your own implementations.\r\n */\r\nexport abstract class OAuthStorage {\r\n  abstract getItem(key: string): string | null;\r\n  abstract removeItem(key: string): void;\r\n  abstract setItem(key: string, data: string): void;\r\n}\r\n\r\n/**\r\n * Represents the received tokens, the received state\r\n * and the parsed claims from the id-token.\r\n */\r\nexport class ReceivedTokens {\r\n  idToken: string;\r\n  accessToken: string;\r\n  idClaims?: object;\r\n  state?: string;\r\n}\r\n\r\n/**\r\n * Represents the parsed and validated id_token.\r\n */\r\nexport interface ParsedIdToken {\r\n  idToken: string;\r\n  idTokenClaims: object;\r\n  idTokenHeader: object;\r\n  idTokenClaimsJson: string;\r\n  idTokenHeaderJson: string;\r\n  idTokenExpiresAt: number;\r\n}\r\n\r\n/**\r\n * Represents the response from the token endpoint\r\n * http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\r\n */\r\nexport interface TokenResponse {\r\n  access_token: string;\r\n  id_token: string; \r\n  token_type: string;\r\n  expires_in: number;\r\n  refresh_token: string;\r\n  scope: string;\r\n  state?: string;\r\n}\r\n\r\n/**\r\n * Represents the response from the user info endpoint\r\n * http://openid.net/specs/openid-connect-core-1_0.html#UserInfo\r\n */\r\nexport interface UserInfo {\r\n  sub: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Represents an OpenID Connect discovery document\r\n */\r\nexport interface OidcDiscoveryDoc {\r\n  issuer: string;\r\n  authorization_endpoint: string;\r\n  token_endpoint: string;\r\n  token_endpoint_auth_methods_supported: string[];\r\n  token_endpoint_auth_signing_alg_values_supported: string[];\r\n  userinfo_endpoint: string;\r\n  check_session_iframe: string;\r\n  end_session_endpoint: string;\r\n  jwks_uri: string;\r\n  registration_endpoint: string;\r\n  scopes_supported: string[];\r\n  response_types_supported: string[];\r\n  acr_values_supported: string[];\r\n  response_modes_supported: string[];\r\n  grant_types_supported: string[];\r\n  subject_types_supported: string[];\r\n  userinfo_signing_alg_values_supported: string[];\r\n  userinfo_encryption_alg_values_supported: string[];\r\n  userinfo_encryption_enc_values_supported: string[];\r\n  id_token_signing_alg_values_supported: string[];\r\n  id_token_encryption_alg_values_supported: string[];\r\n  id_token_encryption_enc_values_supported: string[];\r\n  request_object_signing_alg_values_supported: string[];\r\n  display_values_supported: string[];\r\n  claim_types_supported: string[];\r\n  claims_supported: string[];\r\n  claims_parameter_supported: boolean;\r\n  service_documentation: string;\r\n  ui_locales_supported: string[];\r\n}\r\n","// see: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_.22Unicode_Problem.22\r\nexport function b64DecodeUnicode(str) {\r\n  const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\r\n  return decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function(c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n}\r\n\r\nexport function base64UrlEncode(str): string {\r\n  const base64 = btoa(str);\r\n  return base64\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=/g, '');\r\n}","import { base64UrlEncode } from \"../base64-helper\";\r\n\r\nexport interface ValidationParams {\r\n  idToken: string;\r\n  accessToken: string;\r\n  idTokenHeader: object;\r\n  idTokenClaims: object;\r\n  jwks: object;\r\n  loadKeys: () => Promise<object>;\r\n}\r\n\r\n/**\r\n * Interface for Handlers that are hooked in to\r\n * validate tokens.\r\n */\r\nexport abstract class ValidationHandler {\r\n  /**\r\n   * Validates the signature of an id_token.\r\n   */\r\n  public abstract validateSignature(\r\n    validationParams: ValidationParams\r\n  ): Promise<any>;\r\n\r\n  /**\r\n   * Validates the at_hash in an id_token against the received access_token.\r\n   */\r\n  public abstract validateAtHash(validationParams: ValidationParams): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * This abstract implementation of ValidationHandler already implements\r\n * the method validateAtHash. However, to make use of it,\r\n * you have to override the method calcHash.\r\n */\r\nexport abstract class AbstractValidationHandler implements ValidationHandler {\r\n  /**\r\n   * Validates the signature of an id_token.\r\n   */\r\n  abstract validateSignature(validationParams: ValidationParams): Promise<any>;\r\n\r\n  /**\r\n   * Validates the at_hash in an id_token against the received access_token.\r\n   */\r\n  async validateAtHash(params: ValidationParams): Promise<boolean> {\r\n    let hashAlg = this.inferHashAlgorithm(params.idTokenHeader);\r\n\r\n    let tokenHash = await this.calcHash(params.accessToken, hashAlg); // sha256(accessToken, { asString: true });\r\n\r\n    let leftMostHalf = tokenHash.substr(0, tokenHash.length / 2);\r\n\r\n    let atHash = base64UrlEncode(leftMostHalf);\r\n\r\n    let claimsAtHash = params.idTokenClaims['at_hash'].replace(/=/g, '');\r\n\r\n    if (atHash !== claimsAtHash) {\r\n      console.error('exptected at_hash: ' + atHash);\r\n      console.error('actual at_hash: ' + claimsAtHash);\r\n    }\r\n\r\n    return atHash === claimsAtHash;\r\n  }\r\n\r\n  /**\r\n   * Infers the name of the hash algorithm to use\r\n   * from the alg field of an id_token.\r\n   *\r\n   * @param jwtHeader the id_token's parsed header\r\n   */\r\n  protected inferHashAlgorithm(jwtHeader: object): string {\r\n    let alg: string = jwtHeader['alg'];\r\n\r\n    if (!alg.match(/^.S[0-9]{3}$/)) {\r\n      throw new Error('Algorithm not supported: ' + alg);\r\n    }\r\n\r\n    return 'sha-' + alg.substr(2);\r\n  }\r\n\r\n  /**\r\n   * Calculates the hash for the passed value by using\r\n   * the passed hash algorithm.\r\n   *\r\n   * @param valueToHash\r\n   * @param algorithm\r\n   */\r\n  protected abstract calcHash(valueToHash: string, algorithm: string): Promise<string>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class UrlHelperService {\r\n  public getHashFragmentParams(customHashFragment?: string): object {\r\n    let hash = customHashFragment || window.location.hash;\r\n\r\n    hash = decodeURIComponent(hash);\r\n\r\n    if (hash.indexOf('#') !== 0) {\r\n      return {};\r\n    }\r\n\r\n    const questionMarkPosition = hash.indexOf('?');\r\n\r\n    if (questionMarkPosition > -1) {\r\n      hash = hash.substr(questionMarkPosition + 1);\r\n    } else {\r\n      hash = hash.substr(1);\r\n    }\r\n\r\n    return this.parseQueryString(hash);\r\n  }\r\n\r\n  public parseQueryString(queryString: string): object {\r\n    const data = {};\r\n    let\r\n      pairs,\r\n      pair,\r\n      separatorIndex,\r\n      escapedKey,\r\n      escapedValue,\r\n      key,\r\n      value;\r\n\r\n    if (queryString === null) {\r\n      return data;\r\n    }\r\n\r\n    pairs = queryString.split('&');\r\n\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      pair = pairs[i];\r\n      separatorIndex = pair.indexOf('=');\r\n\r\n      if (separatorIndex === -1) {\r\n        escapedKey = pair;\r\n        escapedValue = null;\r\n      } else {\r\n        escapedKey = pair.substr(0, separatorIndex);\r\n        escapedValue = pair.substr(separatorIndex + 1);\r\n      }\r\n\r\n      key = decodeURIComponent(escapedKey);\r\n      value = decodeURIComponent(escapedValue);\r\n\r\n      if (key.substr(0, 1) === '/') { key = key.substr(1); }\r\n\r\n      data[key] = value;\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","export type EventType =\r\n  | 'discovery_document_loaded'\r\n  | 'received_first_token'\r\n  | 'jwks_load_error'\r\n  | 'invalid_nonce_in_state'\r\n  | 'discovery_document_load_error'\r\n  | 'discovery_document_validation_error'\r\n  | 'user_profile_loaded'\r\n  | 'user_profile_load_error'\r\n  | 'token_received'\r\n  | 'token_error'\r\n  | 'code_error'\r\n  | 'token_refreshed'\r\n  | 'token_refresh_error'\r\n  | 'silent_refresh_error'\r\n  | 'silently_refreshed'\r\n  | 'silent_refresh_timeout'\r\n  | 'token_validation_error'\r\n  | 'token_expires'\r\n  | 'session_changed'\r\n  | 'session_error'\r\n  | 'session_terminated'\r\n  | 'logout';\r\n\r\nexport abstract class OAuthEvent {\r\n  constructor(readonly type: EventType) {}\r\n}\r\n\r\nexport class OAuthSuccessEvent extends OAuthEvent {\r\n  constructor(type: EventType, readonly info: any = null) {\r\n    super(type);\r\n  }\r\n}\r\n\r\nexport class OAuthInfoEvent extends OAuthEvent {\r\n  constructor(type: EventType, readonly info: any = null) {\r\n    super(type);\r\n  }\r\n}\r\n\r\nexport class OAuthErrorEvent extends OAuthEvent {\r\n  constructor(\r\n    type: EventType,\r\n    readonly reason: object,\r\n    readonly params: object = null\r\n  ) {\r\n    super(type);\r\n  }\r\n}\r\n","export class AuthConfig {\r\n  /**\r\n   * The client's id as registered with the auth server\r\n   */\r\n  public clientId? = '';\r\n\r\n  /**\r\n   * The client's redirectUri as registered with the auth server\r\n   */\r\n  public redirectUri? = '';\r\n\r\n  /**\r\n   * An optional second redirectUri where the auth server\r\n   * redirects the user to after logging out.\r\n   */\r\n  public postLogoutRedirectUri? = '';\r\n\r\n  /**\r\n   * The auth server's endpoint that allows to log\r\n   * the user in when using implicit flow.\r\n   */\r\n  public loginUrl? = '';\r\n\r\n  /**\r\n   * The requested scopes\r\n   */\r\n  public scope? = 'openid profile';\r\n\r\n  public resource? = '';\r\n\r\n  public rngUrl? = '';\r\n\r\n  /**\r\n   * Defines whether to use OpenId Connect during\r\n   * implicit flow.\r\n   */\r\n  public oidc? = true;\r\n\r\n  /**\r\n   * Defines whether to request an access token during\r\n   * implicit flow.\r\n   */\r\n  public requestAccessToken? = true;\r\n\r\n  public options?: any = null;\r\n\r\n  /**\r\n   * The issuer's uri.\r\n   */\r\n  public issuer? = '';\r\n\r\n  /**\r\n   * The logout url.\r\n   */\r\n  public logoutUrl? = '';\r\n\r\n  /**\r\n   * Defines whether to clear the hash fragment after logging in.\r\n   */\r\n  public clearHashAfterLogin? = true;\r\n\r\n  /**\r\n   * Url of the token endpoint as defined by OpenId Connect and OAuth 2.\r\n   */\r\n  public tokenEndpoint?: string = null;\r\n\r\n  /**\r\n   * Url of the userinfo endpoint as defined by OpenId Connect.\r\n   */\r\n  public userinfoEndpoint?: string = null;\r\n\r\n  public responseType? = '';\r\n\r\n  /**\r\n   * Defines whether additional debug information should\r\n   * be shown at the console. Note that in certain browsers\r\n   * the verbosity of the console needs to be explicitly set\r\n   * to include Debug level messages.\r\n   */\r\n   public showDebugInformation? = false;\r\n\r\n  /**\r\n   * The redirect uri used when doing silent refresh.\r\n   */\r\n  public silentRefreshRedirectUri? = '';\r\n\r\n  public silentRefreshMessagePrefix? = '';\r\n\r\n  /**\r\n   * Set this to true to display the iframe used for\r\n   * silent refresh for debugging.\r\n   */\r\n  public silentRefreshShowIFrame? = false;\r\n\r\n  /**\r\n   * Timeout for silent refresh.\r\n   * @internal\r\n   * depreacted b/c of typo, see silentRefreshTimeout\r\n   */\r\n  public siletRefreshTimeout?: number = 1000 * 20;\r\n\r\n  /**\r\n   * Timeout for silent refresh.\r\n   */\r\n  public silentRefreshTimeout?: number = 1000 * 20;\r\n\r\n  /**\r\n   * Some auth servers don't allow using password flow\r\n   * w/o a client secret while the standards do not\r\n   * demand for it. In this case, you can set a password\r\n   * here. As this password is exposed to the public\r\n   * it does not bring additional security and is therefore\r\n   * as good as using no password.\r\n   */\r\n  public dummyClientSecret?: string = null;\r\n\r\n  /**\r\n   * Defines whether https is required.\r\n   * The default value is remoteOnly which only allows\r\n   * http for localhost, while every other domains need\r\n   * to be used with https.\r\n   */\r\n  public requireHttps?: boolean | 'remoteOnly' = 'remoteOnly';\r\n\r\n  /**\r\n   * Defines whether every url provided by the discovery\r\n   * document has to start with the issuer's url.\r\n   */\r\n  public strictDiscoveryDocumentValidation? = true;\r\n\r\n  /**\r\n   * JSON Web Key Set (https://tools.ietf.org/html/rfc7517)\r\n   * with keys used to validate received id_tokens.\r\n   * This is taken out of the disovery document. Can be set manually too.\r\n   */\r\n  public jwks?: object = null;\r\n\r\n  /**\r\n   * Map with additional query parameter that are appended to\r\n   * the request when initializing implicit flow.\r\n   */\r\n  public customQueryParams?: object = null;\r\n\r\n  public silentRefreshIFrameName? = 'angular-oauth-oidc-silent-refresh-iframe';\r\n\r\n  /**\r\n   * Defines when the token_timeout event should be raised.\r\n   * If you set this to the default value 0.75, the event\r\n   * is triggered after 75% of the token's life time.\r\n   */\r\n  public timeoutFactor? = 0.75;\r\n\r\n  /**\r\n   * If true, the lib will try to check whether the user\r\n   * is still logged in on a regular basis as described\r\n   * in http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n   */\r\n  public sessionChecksEnabled? = false;\r\n\r\n  /**\r\n   * Interval in msec for checking the session\r\n   * according to http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n   */\r\n  public sessionCheckIntervall? = 3 * 1000;\r\n\r\n  /**\r\n   * Url for the iframe used for session checks\r\n   */\r\n  public sessionCheckIFrameUrl?: string = null;\r\n\r\n  /**\r\n   * Name of the iframe to use for session checks\r\n   */\r\n  public sessionCheckIFrameName? = 'angular-oauth-oidc-check-session-iframe';\r\n\r\n  /**\r\n   * This property has been introduced to disable at_hash checks\r\n   * and is indented for Identity Provider that does not deliver\r\n   * an at_hash EVEN THOUGH its recommended by the OIDC specs.\r\n   * Of course, when disabling these checks the we are bypassing\r\n   * a security check which means we are more vulnerable.\r\n   */\r\n  public disableAtHashCheck? = false;\r\n\r\n  /**\r\n   * Defines wether to check the subject of a refreshed token after silent refresh.\r\n   * Normally, it should be the same as before.\r\n   */\r\n  public skipSubjectCheck? = false;\r\n\r\n  public useIdTokenHintForSilentRefresh? = false;\r\n\r\n  /**\r\n   * Defined whether to skip the validation of the issuer in the discovery document.\r\n   * Normally, the discovey document's url starts with the url of the issuer.\r\n   */\r\n  public skipIssuerCheck? = false;\r\n\r\n  /**\r\n   * According to rfc6749 it is recommended (but not required) that the auth\r\n   * server exposes the access_token's life time in seconds.\r\n   * This is a fallback value for the case this value is not exposed.\r\n   */\r\n  public fallbackAccessTokenExpirationTimeInSec?: number;\r\n\r\n  /**\r\n   * final state sent to issuer is built as follows:\r\n   * state = nonce + nonceStateSeparator + additional state\r\n   * Default separator is ';' (encoded %3B).\r\n   * In rare cases, this character might be forbidden or inconvenient to use by the issuer so it can be customized.\r\n   */\r\n  public nonceStateSeparator? = ';';\r\n\r\n  /**\r\n   * Set this to true to use HTTP BASIC auth for password flow\r\n   */\r\n  public useHttpBasicAuth? = false;\r\n\r\n  /**\r\n   * The window of time (in seconds) to allow the current time to deviate when validating id_token's iat and exp values.\r\n   */\r\n  public clockSkewInSec?: 600;\r\n\r\n  /**\r\n   * Code Flow is by defauld used together with PKCI which is also higly recommented.\r\n   * You can disbale it here by setting this flag to true.\r\n   * https://tools.ietf.org/html/rfc7636#section-1.1\r\n   */\r\n  public disablePKCE? = false;\r\n\r\n  constructor(json?: Partial<AuthConfig>) {\r\n    if (json) {\r\n      Object.assign(this, json);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property allows you to override the method that is used to open the login url,\r\n   * allowing a way for implementations to specify their own method of routing to new\r\n   * urls.\r\n   */\r\n  public openUri?: ((uri: string) => void) = uri => {\r\n    location.href = uri;\r\n  }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n/**\r\n * This custom encoder allows charactes like +, % and / to be used in passwords\r\n */\r\nexport class WebHttpUrlEncodingCodec implements HttpParameterCodec {\r\n  encodeKey(k: string): string {\r\n    return encodeURIComponent(k);\r\n  }\r\n\r\n  encodeValue(v: string): string {\r\n    return encodeURIComponent(v);\r\n  }\r\n\r\n  decodeKey(k: string): string {\r\n    return decodeURIComponent(k);\r\n  }\r\n\r\n  decodeValue(v: string) {\r\n    return decodeURIComponent(v);\r\n  }\r\n}\r\n","/**\r\n * Abstraction for crypto algorithms\r\n*/\r\nexport abstract class CryptoHandler {\r\n\r\n    abstract calcHash(valueToHash: string, algorithm: string): Promise<string>;\r\n\r\n}","import { Injectable, NgZone, Optional, OnDestroy } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, Subject, Subscription, of, race, from } from 'rxjs';\r\nimport { filter, delay, first, tap, map, switchMap } from 'rxjs/operators';\r\n\r\nimport {\r\n    ValidationHandler,\r\n    ValidationParams\r\n} from './token-validation/validation-handler';\r\nimport { UrlHelperService } from './url-helper.service';\r\nimport {\r\n    OAuthEvent,\r\n    OAuthInfoEvent,\r\n    OAuthErrorEvent,\r\n    OAuthSuccessEvent\r\n} from './events';\r\nimport {\r\n    OAuthLogger,\r\n    OAuthStorage,\r\n    LoginOptions,\r\n    ParsedIdToken,\r\n    OidcDiscoveryDoc,\r\n    TokenResponse,\r\n    UserInfo\r\n} from './types';\r\nimport { b64DecodeUnicode, base64UrlEncode } from './base64-helper';\r\nimport { AuthConfig } from './auth.config';\r\nimport { WebHttpUrlEncodingCodec } from './encoder';\r\nimport { CryptoHandler } from './token-validation/crypto-handler';\r\n\r\n/**\r\n * Service for logging in and logging out with\r\n * OIDC and OAuth2. Supports implicit flow and\r\n * password flow.\r\n */\r\n@Injectable()\r\nexport class OAuthService extends AuthConfig implements OnDestroy {\r\n    // Extending AuthConfig ist just for LEGACY reasons\r\n    // to not break existing code.\r\n\r\n    /**\r\n     * The ValidationHandler used to validate received\r\n     * id_tokens.\r\n     */\r\n    public tokenValidationHandler: ValidationHandler;\r\n\r\n    /**\r\n     * @internal\r\n     * Deprecated:  use property events instead\r\n     */\r\n    public discoveryDocumentLoaded = false;\r\n\r\n    /**\r\n     * @internal\r\n     * Deprecated:  use property events instead\r\n     */\r\n    public discoveryDocumentLoaded$: Observable<object>;\r\n\r\n    /**\r\n     * Informs about events, like token_received or token_expires.\r\n     * See the string enum EventType for a full list of event types.\r\n     */\r\n    public events: Observable<OAuthEvent>;\r\n\r\n    /**\r\n     * The received (passed around) state, when logging\r\n     * in with implicit flow.\r\n     */\r\n    public state? = '';\r\n\r\n    protected eventsSubject: Subject<OAuthEvent> = new Subject<OAuthEvent>();\r\n    protected discoveryDocumentLoadedSubject: Subject<object> = new Subject<object>();\r\n    protected silentRefreshPostMessageEventListener: EventListener;\r\n    protected grantTypesSupported: Array<string> = [];\r\n    protected _storage: OAuthStorage;\r\n    protected accessTokenTimeoutSubscription: Subscription;\r\n    protected idTokenTimeoutSubscription: Subscription;\r\n    protected sessionCheckEventListener: EventListener;\r\n    protected jwksUri: string;\r\n    protected sessionCheckTimer: any;\r\n    protected silentRefreshSubject: string;\r\n    protected inImplicitFlow = false;\r\n\r\n    constructor(\r\n        protected ngZone: NgZone,\r\n        protected http: HttpClient,\r\n        @Optional() storage: OAuthStorage,\r\n        @Optional() tokenValidationHandler: ValidationHandler,\r\n        @Optional() protected config: AuthConfig,\r\n        protected urlHelper: UrlHelperService,\r\n        protected logger: OAuthLogger,\r\n        @Optional() protected crypto: CryptoHandler,\r\n    ) {\r\n        super();\r\n\r\n        this.debug('angular-oauth2-oidc v8-beta');\r\n\r\n        this.discoveryDocumentLoaded$ = this.discoveryDocumentLoadedSubject.asObservable();\r\n        this.events = this.eventsSubject.asObservable();\r\n\r\n        if (tokenValidationHandler) {\r\n            this.tokenValidationHandler = tokenValidationHandler;\r\n        }\r\n\r\n        if (config) {\r\n            this.configure(config);\r\n        }\r\n\r\n        try {\r\n            if (storage) {\r\n                this.setStorage(storage);\r\n            } else if (typeof sessionStorage !== 'undefined') {\r\n                this.setStorage(sessionStorage);\r\n            }\r\n        } catch (e) {\r\n\r\n            console.error(\r\n                'No OAuthStorage provided and cannot access default (sessionStorage).'\r\n                + 'Consider providing a custom OAuthStorage implementation in your module.',\r\n                e\r\n            );\r\n        }\r\n\r\n        this.setupRefreshTimer();\r\n    }\r\n\r\n    /**\r\n     * Use this method to configure the service\r\n     * @param config the configuration\r\n     */\r\n    public configure(config: AuthConfig) {\r\n        // For the sake of downward compatibility with\r\n        // original configuration API\r\n        Object.assign(this, new AuthConfig(), config);\r\n\r\n        this.config = Object.assign({} as AuthConfig, new AuthConfig(), config);\r\n\r\n        if (this.sessionChecksEnabled) {\r\n            this.setupSessionCheck();\r\n        }\r\n\r\n        this.configChanged();\r\n    }\r\n\r\n    protected configChanged(): void {\r\n        this.setupRefreshTimer();\r\n    }\r\n\r\n    public restartSessionChecksIfStillLoggedIn(): void {\r\n        if (this.hasValidIdToken()) {\r\n            this.initSessionCheck();\r\n        }\r\n    }\r\n\r\n    protected restartRefreshTimerIfStillLoggedIn(): void {\r\n        this.setupExpirationTimers();\r\n    }\r\n\r\n    protected setupSessionCheck() {\r\n        this.events.pipe(filter(e => e.type === 'token_received')).subscribe(e => {\r\n            this.initSessionCheck();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will setup up silent refreshing for when the token is\r\n     * about to expire. When the user is logged out via this.logOut method, the\r\n     * silent refreshing will pause and not refresh the tokens until the user is\r\n     * logged back in via receiving a new token.\r\n     * @param params Additional parameter to pass\r\n     * @param listenTo Setup automatic refresh of a specific token type\r\n     */\r\n    public setupAutomaticSilentRefresh(params: object = {}, listenTo?: 'access_token' | 'id_token' | 'any', noPrompt = true) {\r\n      let shouldRunSilentRefresh = true;\r\n      this.events.pipe(\r\n        tap((e) => {\r\n          if (e.type === 'token_received') {\r\n            shouldRunSilentRefresh = true;\r\n          } else if (e.type === 'logout') {\r\n            shouldRunSilentRefresh = false;\r\n          }\r\n        }),\r\n        filter(e => e.type === 'token_expires')\r\n      ).subscribe(e => {\r\n        const event = e as OAuthInfoEvent;\r\n        if ((listenTo == null || listenTo === 'any' || event.info === listenTo) && shouldRunSilentRefresh) {\r\n          // this.silentRefresh(params, noPrompt).catch(_ => {\r\n          this.refreshInternal(params, noPrompt).catch(_ => {\r\n            this.debug('Automatic silent refresh did not work');\r\n          });\r\n        }\r\n      });\r\n\r\n      this.restartRefreshTimerIfStillLoggedIn();\r\n    }\r\n\r\n    protected refreshInternal(params, noPrompt) {\r\n        if (this.responseType === 'code') {\r\n            return this.refreshToken();\r\n        } else {\r\n            return this.silentRefresh(params, noPrompt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocument(...)` and\r\n     * directly chains using the `then(...)` part of the promise to call\r\n     * the `tryLogin(...)` method.\r\n     *\r\n     * @param options LoginOptions to pass through to `tryLogin(...)`\r\n     */\r\n    public loadDiscoveryDocumentAndTryLogin(options: LoginOptions = null): Promise<boolean> {\r\n        return this.loadDiscoveryDocument().then(doc => {\r\n            return this.tryLogin(options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocumentAndTryLogin(...)`\r\n     * and if then chains to `initImplicitFlow()`, but only if there is no valid\r\n     * IdToken or no valid AccessToken.\r\n     *\r\n     * @param options LoginOptions to pass through to `tryLogin(...)`\r\n     */\r\n    public loadDiscoveryDocumentAndLogin(options: LoginOptions = null): Promise<boolean> {\r\n        return this.loadDiscoveryDocumentAndTryLogin(options).then(_ => {\r\n            if (!this.hasValidIdToken() || !this.hasValidAccessToken()) {\r\n                this.initImplicitFlow();\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected debug(...args): void {\r\n        if (this.showDebugInformation) {\r\n            this.logger.debug.apply(console, args);\r\n        }\r\n    }\r\n\r\n    protected validateUrlFromDiscoveryDocument(url: string): string[] {\r\n        const errors: string[] = [];\r\n        const httpsCheck = this.validateUrlForHttps(url);\r\n        const issuerCheck = this.validateUrlAgainstIssuer(url);\r\n\r\n        if (!httpsCheck) {\r\n            errors.push(\r\n                'https for all urls required. Also for urls received by discovery.'\r\n            );\r\n        }\r\n\r\n        if (!issuerCheck) {\r\n            errors.push(\r\n                'Every url in discovery document has to start with the issuer url.' +\r\n                'Also see property strictDiscoveryDocumentValidation.'\r\n            );\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    protected validateUrlForHttps(url: string): boolean {\r\n        if (!url) {\r\n            return true;\r\n        }\r\n\r\n        const lcUrl = url.toLowerCase();\r\n\r\n        if (this.requireHttps === false) {\r\n            return true;\r\n        }\r\n\r\n        if (\r\n            (lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/) ||\r\n                lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/)) &&\r\n            this.requireHttps === 'remoteOnly'\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return lcUrl.startsWith('https://');\r\n    }\r\n\r\n    protected validateUrlAgainstIssuer(url: string) {\r\n        if (!this.strictDiscoveryDocumentValidation) {\r\n            return true;\r\n        }\r\n        if (!url) {\r\n            return true;\r\n        }\r\n        return url.toLowerCase().startsWith(this.issuer.toLowerCase());\r\n    }\r\n\r\n    protected setupRefreshTimer(): void {\r\n        if (typeof window === 'undefined') {\r\n            this.debug('timer not supported on this plattform');\r\n            return;\r\n        }\r\n\r\n        if (this.hasValidIdToken()) {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        }\r\n\r\n        this.events.pipe(filter(e => e.type === 'token_received')).subscribe(_ => {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        });\r\n    }\r\n\r\n    protected setupExpirationTimers(): void {\r\n        const idTokenExp = this.getIdTokenExpiration() || Number.MAX_VALUE;\r\n        const accessTokenExp = this.getAccessTokenExpiration() || Number.MAX_VALUE;\r\n        const useAccessTokenExp = accessTokenExp <= idTokenExp;\r\n\r\n        if (this.hasValidAccessToken() && useAccessTokenExp) {\r\n            this.setupAccessTokenTimer();\r\n        }\r\n\r\n        if (this.hasValidIdToken() && !useAccessTokenExp) {\r\n            this.setupIdTokenTimer();\r\n        }\r\n    }\r\n\r\n    protected setupAccessTokenTimer(): void {\r\n        const expiration = this.getAccessTokenExpiration();\r\n        const storedAt = this.getAccessTokenStoredAt();\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.accessTokenTimeoutSubscription = of(\r\n                new OAuthInfoEvent('token_expires', 'access_token')\r\n            )\r\n                .pipe(delay(timeout))\r\n                .subscribe(e => {\r\n                    this.ngZone.run(() => {\r\n                        this.eventsSubject.next(e);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    protected setupIdTokenTimer(): void {\r\n        const expiration = this.getIdTokenExpiration();\r\n        const storedAt = this.getIdTokenStoredAt();\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.idTokenTimeoutSubscription = of(\r\n                new OAuthInfoEvent('token_expires', 'id_token')\r\n            )\r\n                .pipe(delay(timeout))\r\n                .subscribe(e => {\r\n                    this.ngZone.run(() => {\r\n                        this.eventsSubject.next(e);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    protected clearAccessTokenTimer(): void {\r\n        if (this.accessTokenTimeoutSubscription) {\r\n            this.accessTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    protected clearIdTokenTimer(): void {\r\n        if (this.idTokenTimeoutSubscription) {\r\n            this.idTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    protected calcTimeout(storedAt: number, expiration: number): number {\r\n        const now = Date.now();\r\n        const delta = (expiration - storedAt) * this.timeoutFactor - (now - storedAt);\r\n        return Math.max(0, delta);\r\n    }\r\n\r\n    /**\r\n     * DEPRECATED. Use a provider for OAuthStorage instead:\r\n     *\r\n     * { provide: OAuthStorage, useFactory: oAuthStorageFactory }\r\n     * export function oAuthStorageFactory(): OAuthStorage { return localStorage; }\r\n     * Sets a custom storage used to store the received\r\n     * tokens on client side. By default, the browser's\r\n     * sessionStorage is used.\r\n     * @ignore\r\n     *\r\n     * @param storage\r\n     */\r\n    public setStorage(storage: OAuthStorage): void {\r\n        this._storage = storage;\r\n        this.configChanged();\r\n    }\r\n\r\n    /**\r\n     * Loads the discovery document to configure most\r\n     * properties of this service. The url of the discovery\r\n     * document is infered from the issuer's url according\r\n     * to the OpenId Connect spec. To use another url you\r\n     * can pass it to to optional parameter fullUrl.\r\n     *\r\n     * @param fullUrl\r\n     */\r\n    public loadDiscoveryDocument(fullUrl: string = null): Promise<object> {\r\n        return new Promise((resolve, reject) => {\r\n            if (!fullUrl) {\r\n                fullUrl = this.issuer || '';\r\n                if (!fullUrl.endsWith('/')) {\r\n                    fullUrl += '/';\r\n                }\r\n                fullUrl += '.well-known/openid-configuration';\r\n            }\r\n\r\n            if (!this.validateUrlForHttps(fullUrl)) {\r\n                reject('issuer must use https, or config value for property requireHttps must allow http');\r\n                return;\r\n            }\r\n\r\n            this.http.get<OidcDiscoveryDoc>(fullUrl).subscribe(\r\n                doc => {\r\n                    if (!this.validateDiscoveryDocument(doc)) {\r\n                        this.eventsSubject.next(\r\n                            new OAuthErrorEvent('discovery_document_validation_error', null)\r\n                        );\r\n                        reject('discovery_document_validation_error');\r\n                        return;\r\n                    }\r\n\r\n                    this.loginUrl = doc.authorization_endpoint;\r\n                    this.logoutUrl = doc.end_session_endpoint || this.logoutUrl;\r\n                    this.grantTypesSupported = doc.grant_types_supported;\r\n                    this.issuer = doc.issuer;\r\n                    this.tokenEndpoint = doc.token_endpoint;\r\n                    this.userinfoEndpoint = doc.userinfo_endpoint;\r\n                    this.jwksUri = doc.jwks_uri;\r\n                    this.sessionCheckIFrameUrl = doc.check_session_iframe || this.sessionCheckIFrameUrl;\r\n\r\n                    this.discoveryDocumentLoaded = true;\r\n                    this.discoveryDocumentLoadedSubject.next(doc);\r\n\r\n                    if (this.sessionChecksEnabled) {\r\n                        this.restartSessionChecksIfStillLoggedIn();\r\n                    }\r\n\r\n                    this.loadJwks()\r\n                        .then(jwks => {\r\n                            const result: object = {\r\n                                discoveryDocument: doc,\r\n                                jwks: jwks\r\n                            };\r\n\r\n                            const event = new OAuthSuccessEvent(\r\n                                'discovery_document_loaded',\r\n                                result\r\n                            );\r\n                            this.eventsSubject.next(event);\r\n                            resolve(event);\r\n                            return;\r\n                        })\r\n                        .catch(err => {\r\n                            this.eventsSubject.next(\r\n                                new OAuthErrorEvent('discovery_document_load_error', err)\r\n                            );\r\n                            reject(err);\r\n                            return;\r\n                        });\r\n                },\r\n                err => {\r\n                    this.logger.error('error loading discovery document', err);\r\n                    this.eventsSubject.next(\r\n                        new OAuthErrorEvent('discovery_document_load_error', err)\r\n                    );\r\n                    reject(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    protected loadJwks(): Promise<object> {\r\n        return new Promise<object>((resolve, reject) => {\r\n            if (this.jwksUri) {\r\n                this.http.get(this.jwksUri).subscribe(\r\n                    jwks => {\r\n                        this.jwks = jwks;\r\n                        this.eventsSubject.next(\r\n                            new OAuthSuccessEvent('discovery_document_loaded')\r\n                        );\r\n                        resolve(jwks);\r\n                    },\r\n                    err => {\r\n                        this.logger.error('error loading jwks', err);\r\n                        this.eventsSubject.next(\r\n                            new OAuthErrorEvent('jwks_load_error', err)\r\n                        );\r\n                        reject(err);\r\n                    }\r\n                );\r\n            } else {\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected validateDiscoveryDocument(doc: OidcDiscoveryDoc): boolean {\r\n        let errors: string[];\r\n\r\n        if (!this.skipIssuerCheck && doc.issuer !== this.issuer) {\r\n            this.logger.error(\r\n                'invalid issuer in discovery document',\r\n                'expected: ' + this.issuer,\r\n                'current: ' + doc.issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.authorization_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating authorization_endpoint in discovery document',\r\n                errors\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.end_session_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating end_session_endpoint in discovery document',\r\n                errors\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.token_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating token_endpoint in discovery document',\r\n                errors\r\n            );\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.userinfo_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating userinfo_endpoint in discovery document',\r\n                errors\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.jwks_uri);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating jwks_uri in discovery document', errors);\r\n            return false;\r\n        }\r\n\r\n        if (this.sessionChecksEnabled && !doc.check_session_iframe) {\r\n            this.logger.warn(\r\n                'sessionChecksEnabled is activated but discovery document' +\r\n                ' does not contain a check_session_iframe field'\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Uses password flow to exchange userName and password for an\r\n     * access_token. After receiving the access_token, this method\r\n     * uses it to query the userinfo endpoint in order to get information\r\n     * about the user in question.\r\n     *\r\n     * When using this, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation\r\n     * fail.\r\n     *\r\n     * @param userName\r\n     * @param password\r\n     * @param headers Optional additional http-headers.\r\n     */\r\n    public fetchTokenUsingPasswordFlowAndLoadUserProfile(\r\n        userName: string,\r\n        password: string,\r\n        headers: HttpHeaders = new HttpHeaders()\r\n    ): Promise<object> {\r\n        return this.fetchTokenUsingPasswordFlow(userName, password, headers).then(\r\n            () => this.loadUserProfile()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Loads the user profile by accessing the user info endpoint defined by OpenId Connect.\r\n     *\r\n     * When using this with OAuth2 password flow, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation fail.\r\n     */\r\n    public loadUserProfile(): Promise<object> {\r\n        if (!this.hasValidAccessToken()) {\r\n            throw new Error('Can not load User Profile without access_token');\r\n        }\r\n        if (!this.validateUrlForHttps(this.userinfoEndpoint)) {\r\n            throw new Error(\r\n                'userinfoEndpoint must use https, or config value for property requireHttps must allow http'\r\n            );\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const headers = new HttpHeaders().set(\r\n                'Authorization',\r\n                'Bearer ' + this.getAccessToken()\r\n            );\r\n\r\n            this.http.get<UserInfo>(this.userinfoEndpoint, { headers }).subscribe(\r\n                info => {\r\n                    this.debug('userinfo received', info);\r\n\r\n                    const existingClaims = this.getIdentityClaims() || {};\r\n\r\n                    if (!this.skipSubjectCheck) {\r\n                        if (\r\n                            this.oidc &&\r\n                            (!existingClaims['sub'] || info.sub !== existingClaims['sub'])\r\n                        ) {\r\n                            const err =\r\n                                'if property oidc is true, the received user-id (sub) has to be the user-id ' +\r\n                                'of the user that has logged in with oidc.\\n' +\r\n                                'if you are not using oidc but just oauth2 password flow set oidc to false';\r\n\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    info = Object.assign({}, existingClaims, info);\r\n\r\n                    this._storage.setItem('id_token_claims_obj', JSON.stringify(info));\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('user_profile_loaded'));\r\n                    resolve(info);\r\n                },\r\n                err => {\r\n                    this.logger.error('error loading user info', err);\r\n                    this.eventsSubject.next(\r\n                        new OAuthErrorEvent('user_profile_load_error', err)\r\n                    );\r\n                    reject(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Uses password flow to exchange userName and password for an access_token.\r\n     * @param userName\r\n     * @param password\r\n     * @param headers Optional additional http-headers.\r\n     */\r\n    public fetchTokenUsingPasswordFlow(\r\n        userName: string,\r\n        password: string,\r\n        headers: HttpHeaders = new HttpHeaders()\r\n    ): Promise<object> {\r\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\r\n            throw new Error(\r\n                'tokenEndpoint must use https, or config value for property requireHttps must allow http'\r\n            );\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            /**\r\n             * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\r\n             * serialize and parse URL parameter keys and values.\r\n             *\r\n             * @stable\r\n             */\r\n            let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\r\n                .set('grant_type', 'password')\r\n                .set('scope', this.scope)\r\n                .set('username', userName)\r\n                .set('password', password);\r\n\r\n            if (this.useHttpBasicAuth) {\r\n                const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n                headers = headers.set(\r\n                    'Authorization',\r\n                    'Basic ' + header);\r\n            }\r\n\r\n            if (!this.useHttpBasicAuth) {\r\n                params = params.set('client_id', this.clientId);\r\n            }\r\n\r\n            if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n                params = params.set('client_secret', this.dummyClientSecret);\r\n            }\r\n\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n\r\n            headers = headers.set(\r\n                'Content-Type',\r\n                'application/x-www-form-urlencoded'\r\n            );\r\n\r\n            this.http\r\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\r\n                .subscribe(\r\n                    tokenResponse => {\r\n                        this.debug('tokenResponse', tokenResponse);\r\n                        this.storeAccessTokenResponse(\r\n                            tokenResponse.access_token,\r\n                            tokenResponse.refresh_token,\r\n                            tokenResponse.expires_in,\r\n                            tokenResponse.scope\r\n                        );\r\n\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        resolve(tokenResponse);\r\n                    },\r\n                    err => {\r\n                        this.logger.error('Error performing password flow', err);\r\n                        this.eventsSubject.next(new OAuthErrorEvent('token_error', err));\r\n                        reject(err);\r\n                    }\r\n                );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refreshes the token using a refresh_token.\r\n     * This does not work for implicit flow, b/c\r\n     * there is no refresh_token in this flow.\r\n     * A solution for this is provided by the\r\n     * method silentRefresh.\r\n     */\r\n    public refreshToken(): Promise<object> {\r\n\r\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\r\n            throw new Error(\r\n                'tokenEndpoint must use https, or config value for property requireHttps must allow http'\r\n            );\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let params = new HttpParams()\r\n                .set('grant_type', 'refresh_token')\r\n                .set('client_id', this.clientId)\r\n                .set('scope', this.scope)\r\n                .set('refresh_token', this._storage.getItem('refresh_token'));\r\n\r\n            if (this.dummyClientSecret) {\r\n                params = params.set('client_secret', this.dummyClientSecret);\r\n            }\r\n\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n\r\n            const headers = new HttpHeaders().set(\r\n                'Content-Type',\r\n                'application/x-www-form-urlencoded'\r\n            );\r\n\r\n            this.http\r\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\r\n                .pipe(switchMap(tokenResponse => {\r\n                    if (tokenResponse.id_token) {\r\n                        return from(this.processIdToken(tokenResponse.id_token, tokenResponse.access_token, true))\r\n                            .pipe(\r\n                                tap(result => this.storeIdToken(result)),\r\n                                map(_ => tokenResponse)\r\n                            );\r\n                    }\r\n                    else {\r\n                        return of(tokenResponse);\r\n                    }\r\n                }))\r\n                .subscribe(\r\n                    tokenResponse => {\r\n                        this.debug('refresh tokenResponse', tokenResponse);\r\n                        this.storeAccessTokenResponse(\r\n                            tokenResponse.access_token,\r\n                            tokenResponse.refresh_token,\r\n                            tokenResponse.expires_in,\r\n                            tokenResponse.scope\r\n                        );\r\n\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                        resolve(tokenResponse);\r\n                    },\r\n                    err => {\r\n                        this.logger.error('Error performing password flow', err);\r\n                        this.eventsSubject.next(\r\n                            new OAuthErrorEvent('token_refresh_error', err)\r\n                        );\r\n                        reject(err);\r\n                    }\r\n                );\r\n        });\r\n    }\r\n\r\n    protected removeSilentRefreshEventListener(): void {\r\n        if (this.silentRefreshPostMessageEventListener) {\r\n            window.removeEventListener(\r\n                'message',\r\n                this.silentRefreshPostMessageEventListener\r\n            );\r\n            this.silentRefreshPostMessageEventListener = null;\r\n        }\r\n    }\r\n\r\n    protected setupSilentRefreshEventListener(): void {\r\n        this.removeSilentRefreshEventListener();\r\n\r\n        this.silentRefreshPostMessageEventListener = (e: MessageEvent) => {\r\n            const message = this.processMessageEventMessage(e);\r\n\r\n            this.tryLogin({\r\n                customHashFragment: message,\r\n                preventClearHashAfterLogin: true,\r\n                onLoginError: err => {\r\n                    this.eventsSubject.next(\r\n                        new OAuthErrorEvent('silent_refresh_error', err)\r\n                    );\r\n                },\r\n                onTokenReceived: () => {\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('silently_refreshed'));\r\n                }\r\n            }).catch(err => this.debug('tryLogin during silent refresh failed', err));\r\n        };\r\n\r\n        window.addEventListener(\r\n            'message',\r\n            this.silentRefreshPostMessageEventListener\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Performs a silent refresh for implicit flow.\r\n     * Use this method to get new tokens when/before\r\n     * the existing tokens expire.\r\n     */\r\n    public silentRefresh(params: object = {}, noPrompt = true): Promise<OAuthEvent> {\r\n        const claims: object = this.getIdentityClaims() || {};\r\n\r\n        if (this.useIdTokenHintForSilentRefresh && this.hasValidIdToken()) {\r\n            params['id_token_hint'] = this.getIdToken();\r\n        }\r\n\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error(\r\n                'tokenEndpoint must use https, or config value for property requireHttps must allow http'\r\n            );\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            throw new Error('silent refresh is not supported on this platform');\r\n        }\r\n\r\n        const existingIframe = document.getElementById(\r\n            this.silentRefreshIFrameName\r\n        );\r\n\r\n        if (existingIframe) {\r\n            document.body.removeChild(existingIframe);\r\n        }\r\n\r\n        this.silentRefreshSubject = claims['sub'];\r\n\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = this.silentRefreshIFrameName;\r\n\r\n        this.setupSilentRefreshEventListener();\r\n\r\n        const redirectUri = this.silentRefreshRedirectUri || this.redirectUri;\r\n        this.createLoginUrl(null, null, redirectUri, noPrompt, params).then(url => {\r\n            iframe.setAttribute('src', url);\r\n\r\n            if (!this.silentRefreshShowIFrame) {\r\n                iframe.style['display'] = 'none';\r\n            }\r\n            document.body.appendChild(iframe);\r\n        });\r\n\r\n        const errors = this.events.pipe(\r\n            filter(e => e instanceof OAuthErrorEvent),\r\n            first()\r\n        );\r\n        const success = this.events.pipe(\r\n            filter(e => e.type === 'silently_refreshed'),\r\n            first()\r\n        );\r\n        const timeout = of(\r\n            new OAuthErrorEvent('silent_refresh_timeout', null)\r\n        ).pipe(delay(this.silentRefreshTimeout));\r\n\r\n        return race([errors, success, timeout])\r\n            .pipe(\r\n                tap(e => {\r\n                    if (e.type === 'silent_refresh_timeout') {\r\n                        this.eventsSubject.next(e);\r\n                    }\r\n                }),\r\n                map(e => {\r\n                    if (e instanceof OAuthErrorEvent) {\r\n                        throw e;\r\n                    }\r\n                    return e;\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    public initImplicitFlowInPopup(options?: { height?: number, width?: number }) {\r\n        options = options || {};\r\n        return this.createLoginUrl(null, null, this.silentRefreshRedirectUri, false, {\r\n            display: 'popup'\r\n        }).then(url => {\r\n            return new Promise((resolve, reject) => {\r\n                let windowRef = window.open(url, '_blank', this.calculatePopupFeatures(options));\r\n\r\n                const cleanup = () => {\r\n                    window.removeEventListener('message', listener);\r\n                    windowRef.close();\r\n                    windowRef = null;\r\n                };\r\n\r\n                const listener = (e: MessageEvent) => {\r\n                    const message = this.processMessageEventMessage(e);\r\n\r\n                    this.tryLogin({\r\n                        customHashFragment: message,\r\n                        preventClearHashAfterLogin: true,\r\n                    }).then(() => {\r\n                        cleanup();\r\n                        resolve();\r\n                    }, err => {\r\n                        cleanup();\r\n                        reject(err);\r\n                    });\r\n                };\r\n\r\n                window.addEventListener('message', listener);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected calculatePopupFeatures(options: { height?: number, width?: number }) {\r\n        // Specify an static height and width and calculate centered position\r\n        const height = options.height || 470;\r\n        const width = options.width || 500;\r\n        const left = (screen.width / 2) - (width / 2);\r\n        const top = (screen.height / 2) - (height / 2);\r\n        return `location=no,toolbar=no,width=${width},height=${height},top=${top},left=${left}`;\r\n    }\r\n\r\n    protected processMessageEventMessage(e: MessageEvent) {\r\n        let expectedPrefix = '#';\r\n\r\n        if (this.silentRefreshMessagePrefix) {\r\n            expectedPrefix += this.silentRefreshMessagePrefix;\r\n        }\r\n\r\n        if (!e || !e.data || typeof e.data !== 'string') {\r\n            return;\r\n        }\r\n\r\n        const prefixedMessage: string = e.data;\r\n\r\n        if (!prefixedMessage.startsWith(expectedPrefix)) {\r\n            return;\r\n        }\r\n\r\n        return '#' + prefixedMessage.substr(expectedPrefix.length);\r\n    }\r\n\r\n    protected canPerformSessionCheck(): boolean {\r\n        if (!this.sessionChecksEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.sessionCheckIFrameUrl) {\r\n            console.warn(\r\n                'sessionChecksEnabled is activated but there is no sessionCheckIFrameUrl'\r\n            );\r\n            return false;\r\n        }\r\n        const sessionState = this.getSessionState();\r\n        if (!sessionState) {\r\n            console.warn(\r\n                'sessionChecksEnabled is activated but there is no session_state'\r\n            );\r\n            return false;\r\n        }\r\n        if (typeof document === 'undefined') {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected setupSessionCheckEventListener(): void {\r\n        this.removeSessionCheckEventListener();\r\n\r\n        this.sessionCheckEventListener = (e: MessageEvent) => {\r\n            const origin = e.origin.toLowerCase();\r\n            const issuer = this.issuer.toLowerCase();\r\n\r\n            this.debug('sessionCheckEventListener');\r\n\r\n            if (!issuer.startsWith(origin)) {\r\n                this.debug(\r\n                    'sessionCheckEventListener',\r\n                    'wrong origin',\r\n                    origin,\r\n                    'expected',\r\n                    issuer\r\n                );\r\n            }\r\n\r\n            // only run in Angular zone if it is 'changed' or 'error'\r\n            switch (e.data) {\r\n                case 'unchanged':\r\n                    this.handleSessionUnchanged();\r\n                    break;\r\n                case 'changed':\r\n                    this.ngZone.run(() => {\r\n                        this.handleSessionChange();\r\n                    });\r\n                    break;\r\n                case 'error':\r\n                    this.ngZone.run(() => {\r\n                        this.handleSessionError();\r\n                    });\r\n                    break;\r\n            }\r\n\r\n            this.debug('got info from session check inframe', e);\r\n        };\r\n\r\n        // prevent Angular from refreshing the view on every message (runs in intervals)\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.addEventListener('message', this.sessionCheckEventListener);\r\n        });\r\n    }\r\n\r\n    protected handleSessionUnchanged(): void {\r\n        this.debug('session check', 'session unchanged');\r\n    }\r\n\r\n    protected handleSessionChange(): void {\r\n        /* events: session_changed, relogin, stopTimer, logged_out*/\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_changed'));\r\n        this.stopSessionCheckTimer();\r\n        if (this.silentRefreshRedirectUri) {\r\n            this.silentRefresh().catch(_ =>\r\n                this.debug('silent refresh failed after session changed')\r\n            );\r\n            this.waitForSilentRefreshAfterSessionChange();\r\n        } else {\r\n            this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n            this.logOut(true);\r\n        }\r\n    }\r\n\r\n    protected waitForSilentRefreshAfterSessionChange() {\r\n        this.events\r\n            .pipe(\r\n                filter(\r\n                    (e: OAuthEvent) =>\r\n                        e.type === 'silently_refreshed' ||\r\n                        e.type === 'silent_refresh_timeout' ||\r\n                        e.type === 'silent_refresh_error'\r\n                ),\r\n                first()\r\n            )\r\n            .subscribe(e => {\r\n                if (e.type !== 'silently_refreshed') {\r\n                    this.debug('silent refresh did not work after session changed');\r\n                    this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n                    this.logOut(true);\r\n                }\r\n            });\r\n    }\r\n\r\n    protected handleSessionError(): void {\r\n        this.stopSessionCheckTimer();\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_error'));\r\n    }\r\n\r\n    protected removeSessionCheckEventListener(): void {\r\n        if (this.sessionCheckEventListener) {\r\n            window.removeEventListener('message', this.sessionCheckEventListener);\r\n            this.sessionCheckEventListener = null;\r\n        }\r\n    }\r\n\r\n    protected initSessionCheck(): void {\r\n        if (!this.canPerformSessionCheck()) {\r\n            return;\r\n        }\r\n\r\n        const existingIframe = document.getElementById(this.sessionCheckIFrameName);\r\n        if (existingIframe) {\r\n            document.body.removeChild(existingIframe);\r\n        }\r\n\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = this.sessionCheckIFrameName;\r\n\r\n        this.setupSessionCheckEventListener();\r\n\r\n        const url = this.sessionCheckIFrameUrl;\r\n        iframe.setAttribute('src', url);\r\n        iframe.style.display = 'none';\r\n        document.body.appendChild(iframe);\r\n\r\n        this.startSessionCheckTimer();\r\n    }\r\n\r\n    protected startSessionCheckTimer(): void {\r\n        this.stopSessionCheckTimer();\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.sessionCheckTimer = setInterval(\r\n                this.checkSession.bind(this),\r\n                this.sessionCheckIntervall\r\n            );\r\n        });\r\n    }\r\n\r\n    protected stopSessionCheckTimer(): void {\r\n        if (this.sessionCheckTimer) {\r\n            clearInterval(this.sessionCheckTimer);\r\n            this.sessionCheckTimer = null;\r\n        }\r\n    }\r\n\r\n    protected checkSession(): void {\r\n        const iframe: any = document.getElementById(this.sessionCheckIFrameName);\r\n\r\n        if (!iframe) {\r\n            this.logger.warn(\r\n                'checkSession did not find iframe',\r\n                this.sessionCheckIFrameName\r\n            );\r\n        }\r\n\r\n        const sessionState = this.getSessionState();\r\n\r\n        if (!sessionState) {\r\n            this.stopSessionCheckTimer();\r\n        }\r\n\r\n        const message = this.clientId + ' ' + sessionState;\r\n        iframe.contentWindow.postMessage(message, this.issuer);\r\n    }\r\n\r\n    protected async createLoginUrl(\r\n        state = '',\r\n        loginHint = '',\r\n        customRedirectUri = '',\r\n        noPrompt = false,\r\n        params: object = {}\r\n    ) {\r\n        const that = this;\r\n\r\n        let redirectUri: string;\r\n\r\n        if (customRedirectUri) {\r\n            redirectUri = customRedirectUri;\r\n        } else {\r\n            redirectUri = this.redirectUri;\r\n        }\r\n\r\n        const nonce = await this.createAndSaveNonce();\r\n\r\n        if (state) {\r\n            state = nonce + this.config.nonceStateSeparator + state;\r\n        } else {\r\n            state = nonce;\r\n        }\r\n\r\n        if (!this.requestAccessToken && !this.oidc) {\r\n            throw new Error(\r\n                'Either requestAccessToken or oidc or both must be true'\r\n            );\r\n        }\r\n\r\n        if (this.config.responseType) {\r\n            this.responseType = this.config.responseType;\r\n        } else {\r\n            if (this.oidc && this.requestAccessToken) {\r\n                this.responseType = 'id_token token';\r\n            } else if (this.oidc && !this.requestAccessToken) {\r\n                this.responseType = 'id_token';\r\n            } else {\r\n                this.responseType = 'token';\r\n            }\r\n        }\r\n\r\n        const seperationChar = that.loginUrl.indexOf('?') > -1 ? '&' : '?';\r\n\r\n        let scope = that.scope;\r\n\r\n        if (this.oidc && !scope.match(/(^|\\s)openid($|\\s)/)) {\r\n            scope = 'openid ' + scope;\r\n        }\r\n\r\n        let url =\r\n            that.loginUrl +\r\n            seperationChar +\r\n            'response_type=' +\r\n            encodeURIComponent(that.responseType) +\r\n            '&client_id=' +\r\n            encodeURIComponent(that.clientId) +\r\n            '&state=' +\r\n            encodeURIComponent(state) +\r\n            '&redirect_uri=' +\r\n            encodeURIComponent(redirectUri) +\r\n            '&scope=' +\r\n            encodeURIComponent(scope);\r\n\r\n        if (this.responseType === 'code' && !this.disablePKCE) {\r\n            const [challenge, verifier] = await this.createChallangeVerifierPairForPKCE();\r\n            this._storage.setItem('PKCI_verifier', verifier);\r\n            url += '&code_challenge=' + challenge;\r\n            url += '&code_challenge_method=S256';\r\n        }\r\n\r\n        if (loginHint) {\r\n            url += '&login_hint=' + encodeURIComponent(loginHint);\r\n        }\r\n\r\n        if (that.resource) {\r\n            url += '&resource=' + encodeURIComponent(that.resource);\r\n        }\r\n\r\n        if (that.oidc) {\r\n            url += '&nonce=' + encodeURIComponent(nonce);\r\n        }\r\n\r\n        if (noPrompt) {\r\n            url += '&prompt=none';\r\n        }\r\n\r\n        for (const key of Object.keys(params)) {\r\n            url +=\r\n                '&' + encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\r\n        }\r\n\r\n        if (this.customQueryParams) {\r\n            for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                url +=\r\n                    '&' + key + '=' + encodeURIComponent(this.customQueryParams[key]);\r\n            }\r\n        }\r\n\r\n        return url;\r\n        \r\n    }\r\n\r\n    initImplicitFlowInternal(\r\n        additionalState = '',\r\n        params: string | object = ''\r\n    ): void {\r\n        if (this.inImplicitFlow) {\r\n            return;\r\n        }\r\n\r\n        this.inImplicitFlow = true;\r\n\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error(\r\n                'loginUrl must use https, or config value for property requireHttps must allow http'\r\n            );\r\n        }\r\n\r\n        let addParams: object = {};\r\n        let loginHint: string = null;\r\n\r\n        if (typeof params === 'string') {\r\n            loginHint = params;\r\n        } else if (typeof params === 'object') {\r\n            addParams = params;\r\n        }\r\n\r\n        this.createLoginUrl(additionalState, loginHint, null, false, addParams)\r\n            .then(this.config.openUri)\r\n            .catch(error => {\r\n                console.error('Error in initImplicitFlow', error);\r\n                this.inImplicitFlow = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Starts the implicit flow and redirects to user to\r\n     * the auth servers' login url.\r\n     *\r\n     * @param additionalState Optional state that is passed around.\r\n     *  You'll find this state in the property `state` after `tryLogin` logged in the user.\r\n     * @param params Hash with additional parameter. If it is a string, it is used for the\r\n     *               parameter loginHint (for the sake of compatibility with former versions)\r\n     */\r\n    public initImplicitFlow(\r\n        additionalState = '',\r\n        params: string | object = ''\r\n    ): void {\r\n        if (this.loginUrl !== '') {\r\n            this.initImplicitFlowInternal(additionalState, params);\r\n        } else {\r\n            this.events\r\n                .pipe(filter(e => e.type === 'discovery_document_loaded'))\r\n                .subscribe(_ => this.initImplicitFlowInternal(additionalState, params));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset current implicit flow\r\n     *\r\n     * @description This method allows resetting the current implict flow in order to be initialized again.\r\n     */\r\n    public resetImplicitFlow(): void {\r\n      this.inImplicitFlow = false;\r\n    }\r\n\r\n    protected callOnTokenReceivedIfExists(options: LoginOptions): void {\r\n        const that = this;\r\n        if (options.onTokenReceived) {\r\n            const tokenParams = {\r\n                idClaims: that.getIdentityClaims(),\r\n                idToken: that.getIdToken(),\r\n                accessToken: that.getAccessToken(),\r\n                state: that.state\r\n            };\r\n            options.onTokenReceived(tokenParams);\r\n        }\r\n    }\r\n\r\n    protected storeAccessTokenResponse(\r\n        accessToken: string,\r\n        refreshToken: string,\r\n        expiresIn: number,\r\n        grantedScopes: String\r\n    ): void {\r\n        this._storage.setItem('access_token', accessToken);\r\n        if (grantedScopes) {\r\n            this._storage.setItem('granted_scopes', JSON.stringify(grantedScopes.split('+')));\r\n        }\r\n        this._storage.setItem('access_token_stored_at', '' + Date.now());\r\n        if (expiresIn) {\r\n            const expiresInMilliSeconds = expiresIn * 1000;\r\n            const now = new Date();\r\n            const expiresAt = now.getTime() + expiresInMilliSeconds;\r\n            this._storage.setItem('expires_at', '' + expiresAt);\r\n        }\r\n\r\n        if (refreshToken) {\r\n            this._storage.setItem('refresh_token', refreshToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delegates to tryLoginImplicitFlow for the sake of competability\r\n     * @param options Optional options.\r\n     */\r\n    public tryLogin(options: LoginOptions = null): Promise<boolean> {\r\n        if (this.config.responseType === 'code') {\r\n            return this.tryLoginCodeFlow().then(_ => true);\r\n        }\r\n        else {\r\n            return this.tryLoginImplicitFlow(options);\r\n        }\r\n    }\r\n\r\n\r\n    private parseQueryString(queryString: string): object {\r\n        if (!queryString || queryString.length === 0) {\r\n            return {};\r\n        }\r\n\r\n        if (queryString.charAt(0) === '?') {\r\n            queryString = queryString.substr(1);\r\n        }\r\n\r\n        return this.urlHelper.parseQueryString(queryString);\r\n\r\n\r\n    }\r\n\r\n    public tryLoginCodeFlow(): Promise<void> {\r\n\r\n        const parts = this.parseQueryString(window.location.search)\r\n\r\n        const code = parts['code'];\r\n        const state = parts['state'];\r\n\r\n        const href = location.href\r\n                        .replace(/[&\\?]code=[^&\\$]*/, '')\r\n                        .replace(/[&\\?]scope=[^&\\$]*/, '')\r\n                        .replace(/[&\\?]state=[^&\\$]*/, '')\r\n                        .replace(/[&\\?]session_state=[^&\\$]*/, '');\r\n\r\n        history.replaceState(null, window.name, href);\r\n\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError({}, parts);\r\n            const err = new OAuthErrorEvent('code_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!nonceInState) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const success = this.validateNonce(nonceInState);\r\n        if (!success) {\r\n            const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n            this.eventsSubject.next(event);\r\n            return Promise.reject(event);\r\n        }\r\n\r\n        if (code) {\r\n            return new Promise((resolve, reject) => {\r\n                this.getTokenFromCode(code).then(result => {\r\n                    resolve();\r\n                }).catch(err => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get token using an intermediate code. Works for the Authorization Code flow.\r\n     */\r\n    private getTokenFromCode(code: string): Promise<object> {\r\n        let params = new HttpParams()\r\n            .set('grant_type', 'authorization_code')\r\n            .set('code', code)\r\n            .set('redirect_uri', this.redirectUri);\r\n\r\n        if (!this.disablePKCE) {\r\n            const pkciVerifier = this._storage.getItem('PKCI_verifier');\r\n\r\n            if (!pkciVerifier) {\r\n                console.warn('No PKCI verifier found in oauth storage!');\r\n            } else {\r\n                params = params.set('code_verifier', pkciVerifier);\r\n            }\r\n        }\r\n\r\n        return this.fetchAndProcessToken(params);\r\n    }\r\n\r\n    private fetchAndProcessToken(params: HttpParams): Promise<object> {\r\n\r\n        let headers = new HttpHeaders()\r\n                                .set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\r\n            throw new Error('tokenEndpoint must use Http. Also check property requireHttps.');\r\n        }\r\n\r\n        if (this.useHttpBasicAuth) {\r\n            const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n            headers = headers.set(\r\n                'Authorization',\r\n                'Basic ' + header);\r\n        }\r\n\r\n        if (!this.useHttpBasicAuth) {\r\n            params = params.set('client_id', this.clientId);\r\n        }\r\n\r\n        if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n            params = params.set('client_secret', this.dummyClientSecret);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (this.customQueryParams) {\r\n                for (let key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n\r\n            this.http.post<TokenResponse>(this.tokenEndpoint, params, { headers }).subscribe(\r\n                (tokenResponse) => {\r\n                    this.debug('refresh tokenResponse', tokenResponse);\r\n                    this.storeAccessTokenResponse(\r\n                        tokenResponse.access_token, \r\n                        tokenResponse.refresh_token, \r\n                        tokenResponse.expires_in,\r\n                        tokenResponse.scope);\r\n\r\n                    if (this.oidc && tokenResponse.id_token) {\r\n                        this.processIdToken(tokenResponse.id_token, tokenResponse.access_token).  \r\n                        then(result => {\r\n                            this.storeIdToken(result);\r\n            \r\n                            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                            this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n            \r\n                            resolve(tokenResponse);\r\n                        })\r\n                        .catch(reason => {\r\n                            this.eventsSubject.next(new OAuthErrorEvent('token_validation_error', reason));\r\n                            console.error('Error validating tokens');\r\n                            console.error(reason);\r\n            \r\n                            reject(reason);\r\n                        });\r\n                    } else {\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n            \r\n                        resolve(tokenResponse);\r\n                    }\r\n                },\r\n                (err) => {\r\n                    console.error('Error getting token', err);\r\n                    this.eventsSubject.next(new OAuthErrorEvent('token_refresh_error', err));\r\n                    reject(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks whether there are tokens in the hash fragment\r\n     * as a result of the implicit flow. These tokens are\r\n     * parsed, validated and used to sign the user in to the\r\n     * current client.\r\n     *\r\n     * @param options Optional options.\r\n     */\r\n    public tryLoginImplicitFlow(options: LoginOptions = null): Promise<boolean> {\r\n        options = options || {};\r\n\r\n        let parts: object;\r\n\r\n        if (options.customHashFragment) {\r\n            parts = this.urlHelper.getHashFragmentParams(options.customHashFragment);\r\n        } else {\r\n            parts = this.urlHelper.getHashFragmentParams();\r\n        }\r\n\r\n        this.debug('parsed url', parts);\r\n\r\n        const state = parts['state'];\r\n\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError(options, parts);\r\n            const err = new OAuthErrorEvent('token_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const accessToken = parts['access_token'];\r\n        const idToken = parts['id_token'];\r\n        const sessionState = parts['session_state'];\r\n        const grantedScopes = parts['scope'];\r\n\r\n        if (!this.requestAccessToken && !this.oidc) {\r\n            return Promise.reject(\r\n                'Either requestAccessToken or oidc (or both) must be true.'\r\n            );\r\n        }\r\n\r\n        if (this.requestAccessToken && !accessToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck && !state) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.oidc && !idToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        if (this.sessionChecksEnabled && !sessionState) {\r\n            this.logger.warn(\r\n                'session checks (Session Status Change Notification) ' +\r\n                'were activated in the configuration but the id_token ' +\r\n                'does not contain a session_state claim'\r\n            );\r\n        }\r\n\r\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck) {\r\n            const success = this.validateNonce(nonceInState);\r\n\r\n            if (!success) {\r\n                const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n                this.eventsSubject.next(event);\r\n                return Promise.reject(event);\r\n            }\r\n        }\r\n\r\n        if (this.requestAccessToken) {\r\n            this.storeAccessTokenResponse(\r\n                accessToken,\r\n                null,\r\n                parts['expires_in'] || this.fallbackAccessTokenExpirationTimeInSec,\r\n                grantedScopes\r\n            );\r\n        }\r\n\r\n        if (!this.oidc) {\r\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n            if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n                location.hash = '';\r\n            }\r\n\r\n            this.callOnTokenReceivedIfExists(options);\r\n            return Promise.resolve(true);\r\n\r\n        }\r\n\r\n        return this.processIdToken(idToken, accessToken)\r\n            .then(result => {\r\n                if (options.validationHandler) {\r\n                    return options\r\n                        .validationHandler({\r\n                            accessToken: accessToken,\r\n                            idClaims: result.idTokenClaims,\r\n                            idToken: result.idToken,\r\n                            state: state\r\n                        })\r\n                        .then(_ => result);\r\n                }\r\n                return result;\r\n            })\r\n            .then(result => {\r\n                this.storeIdToken(result);\r\n                this.storeSessionState(sessionState);\r\n                if (this.clearHashAfterLogin) {\r\n                    location.hash = '';\r\n                }\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                this.callOnTokenReceivedIfExists(options);\r\n                this.inImplicitFlow = false;\r\n                return true;\r\n            })\r\n            .catch(reason => {\r\n                this.eventsSubject.next(\r\n                    new OAuthErrorEvent('token_validation_error', reason)\r\n                );\r\n                this.logger.error('Error validating tokens');\r\n                this.logger.error(reason);\r\n                return Promise.reject(reason);\r\n            });\r\n    }\r\n\r\n    private parseState(state: string): [string, string] {\r\n        let nonce = state;\r\n        let userState = '';\r\n\r\n        if (state) {\r\n            const idx = state.indexOf(this.config.nonceStateSeparator);\r\n            if (idx > -1) {\r\n                nonce = state.substr(0, idx);\r\n                userState = state.substr(idx + this.config.nonceStateSeparator.length);\r\n            }\r\n        }\r\n        return [nonce, userState];\r\n    }\r\n\r\n    protected validateNonce(\r\n        nonceInState: string\r\n    ): boolean {\r\n        const savedNonce = this._storage.getItem('nonce');\r\n        if (savedNonce !== nonceInState) {\r\n            \r\n            const err = 'Validating access_token failed, wrong state/nonce.';\r\n            console.error(err, savedNonce, nonceInState);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    protected storeIdToken(idToken: ParsedIdToken) {\r\n        this._storage.setItem('id_token', idToken.idToken);\r\n        this._storage.setItem('id_token_claims_obj', idToken.idTokenClaimsJson);\r\n        this._storage.setItem('id_token_expires_at', '' + idToken.idTokenExpiresAt);\r\n        this._storage.setItem('id_token_stored_at', '' + Date.now());\r\n    }\r\n\r\n    protected storeSessionState(sessionState: string): void {\r\n        this._storage.setItem('session_state', sessionState);\r\n    }\r\n\r\n    protected getSessionState(): string {\r\n        return this._storage.getItem('session_state');\r\n    }\r\n\r\n    protected handleLoginError(options: LoginOptions, parts: object): void {\r\n        if (options.onLoginError) {\r\n            options.onLoginError(parts);\r\n        }\r\n        if (this.clearHashAfterLogin) {\r\n            location.hash = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public processIdToken(\r\n        idToken: string,\r\n        accessToken: string,\r\n        skipNonceCheck = false\r\n    ): Promise<ParsedIdToken> {\r\n        const tokenParts = idToken.split('.');\r\n        const headerBase64 = this.padBase64(tokenParts[0]);\r\n        const headerJson = b64DecodeUnicode(headerBase64);\r\n        const header = JSON.parse(headerJson);\r\n        const claimsBase64 = this.padBase64(tokenParts[1]);\r\n        const claimsJson = b64DecodeUnicode(claimsBase64);\r\n        const claims = JSON.parse(claimsJson);\r\n        const savedNonce = this._storage.getItem('nonce');\r\n\r\n        if (Array.isArray(claims.aud)) {\r\n            if (claims.aud.every(v => v !== this.clientId)) {\r\n                const err = 'Wrong audience: ' + claims.aud.join(',');\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        } else {\r\n            if (claims.aud !== this.clientId) {\r\n                const err = 'Wrong audience: ' + claims.aud;\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n\r\n        if (!claims.sub) {\r\n            const err = 'No sub claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        /* For now, we only check whether the sub against\r\n         * silentRefreshSubject when sessionChecksEnabled is on\r\n         * We will reconsider in a later version to do this\r\n         * in every other case too.\r\n         */\r\n        if (\r\n            this.sessionChecksEnabled &&\r\n            this.silentRefreshSubject &&\r\n            this.silentRefreshSubject !== claims['sub']\r\n        ) {\r\n            const err =\r\n                'After refreshing, we got an id_token for another user (sub). ' +\r\n                `Expected sub: ${this.silentRefreshSubject}, received sub: ${\r\n                claims['sub']\r\n                }`;\r\n\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!claims.iat) {\r\n            const err = 'No iat claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!this.skipIssuerCheck && claims.iss !== this.issuer) {\r\n            const err = 'Wrong issuer: ' + claims.iss;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!skipNonceCheck && claims.nonce !== savedNonce) {\r\n            const err = 'Wrong nonce: ' + claims.nonce;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (\r\n            !this.disableAtHashCheck &&\r\n            this.requestAccessToken &&\r\n            !claims['at_hash']\r\n        ) {\r\n            const err = 'An at_hash is needed!';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const now = Date.now();\r\n        const issuedAtMSec = claims.iat * 1000;\r\n        const expiresAtMSec = claims.exp * 1000;\r\n        const clockSkewInMSec = (this.clockSkewInSec || 600) * 1000;\r\n\r\n        if (\r\n            issuedAtMSec - clockSkewInMSec >= now ||\r\n            expiresAtMSec + clockSkewInMSec <= now\r\n        ) {\r\n            const err = 'Token has expired';\r\n            console.error(err);\r\n            console.error({\r\n                now: now,\r\n                issuedAtMSec: issuedAtMSec,\r\n                expiresAtMSec: expiresAtMSec\r\n            });\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const validationParams: ValidationParams = {\r\n            accessToken: accessToken,\r\n            idToken: idToken,\r\n            jwks: this.jwks,\r\n            idTokenClaims: claims,\r\n            idTokenHeader: header,\r\n            loadKeys: () => this.loadJwks()\r\n        };\r\n\r\n\r\n        return this.checkAtHash(validationParams)\r\n          .then(atHashValid => {\r\n            if (\r\n              !this.disableAtHashCheck &&\r\n              this.requestAccessToken &&\r\n              !atHashValid\r\n          ) {\r\n              const err = 'Wrong at_hash';\r\n              this.logger.warn(err);\r\n              return Promise.reject(err);\r\n          }\r\n\r\n          return this.checkSignature(validationParams).then(_ => {\r\n              const result: ParsedIdToken = {\r\n                  idToken: idToken,\r\n                  idTokenClaims: claims,\r\n                  idTokenClaimsJson: claimsJson,\r\n                  idTokenHeader: header,\r\n                  idTokenHeaderJson: headerJson,\r\n                  idTokenExpiresAt: expiresAtMSec\r\n              };\r\n              return result;\r\n          });\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the received claims about the user.\r\n     */\r\n    public getIdentityClaims(): object {\r\n        const claims = this._storage.getItem('id_token_claims_obj');\r\n        if (!claims) {\r\n            return null;\r\n        }\r\n        return JSON.parse(claims);\r\n    }\r\n\r\n    /**\r\n     * Returns the granted scopes from the server.\r\n     */\r\n    public getGrantedScopes(): object {\r\n        const scopes = this._storage.getItem('granted_scopes');\r\n        if (!scopes) {\r\n            return null;\r\n        }\r\n        return JSON.parse(scopes);\r\n    }\r\n\r\n    /**\r\n     * Returns the current id_token.\r\n     */\r\n    public getIdToken(): string {\r\n        return this._storage\r\n            ? this._storage.getItem('id_token')\r\n            : null;\r\n    }\r\n\r\n    protected padBase64(base64data): string {\r\n        while (base64data.length % 4 !== 0) {\r\n            base64data += '=';\r\n        }\r\n        return base64data;\r\n    }\r\n\r\n    /**\r\n     * Returns the current access_token.\r\n     */\r\n    public getAccessToken(): string {\r\n        return this._storage\r\n            ? this._storage.getItem('access_token')\r\n            : null;\r\n    }\r\n\r\n    public getRefreshToken(): string {\r\n        return this._storage\r\n            ? this._storage.getItem('refresh_token')\r\n            : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the expiration date of the access_token\r\n     * as milliseconds since 1970.\r\n     */\r\n    public getAccessTokenExpiration(): number {\r\n        if (!this._storage.getItem('expires_at')) {\r\n            return null;\r\n        }\r\n        return parseInt(this._storage.getItem('expires_at'), 10);\r\n    }\r\n\r\n    protected getAccessTokenStoredAt(): number {\r\n        return parseInt(this._storage.getItem('access_token_stored_at'), 10);\r\n    }\r\n\r\n    protected getIdTokenStoredAt(): number {\r\n        return parseInt(this._storage.getItem('id_token_stored_at'), 10);\r\n    }\r\n\r\n    /**\r\n     * Returns the expiration date of the id_token\r\n     * as milliseconds since 1970.\r\n     */\r\n    public getIdTokenExpiration(): number {\r\n        if (!this._storage.getItem('id_token_expires_at')) {\r\n            return null;\r\n        }\r\n\r\n        return parseInt(this._storage.getItem('id_token_expires_at'), 10);\r\n    }\r\n\r\n    /**\r\n     * Checkes, whether there is a valid access_token.\r\n     */\r\n    public hasValidAccessToken(): boolean {\r\n        if (this.getAccessToken()) {\r\n            const expiresAt = this._storage.getItem('expires_at');\r\n            const now = new Date();\r\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks whether there is a valid id_token.\r\n     */\r\n    public hasValidIdToken(): boolean {\r\n        if (this.getIdToken()) {\r\n            const expiresAt = this._storage.getItem('id_token_expires_at');\r\n            const now = new Date();\r\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the auth-header that can be used\r\n     * to transmit the access_token to a service\r\n     */\r\n    public authorizationHeader(): string {\r\n        return 'Bearer ' + this.getAccessToken();\r\n    }\r\n\r\n    /**\r\n     * Removes all tokens and logs the user out.\r\n     * If a logout url is configured, the user is\r\n     * redirected to it.\r\n     * @param noRedirectToLogoutUrl\r\n     */\r\n    public logOut(noRedirectToLogoutUrl = false): void {\r\n        const id_token = this.getIdToken();\r\n        this._storage.removeItem('access_token');\r\n        this._storage.removeItem('id_token');\r\n        this._storage.removeItem('refresh_token');\r\n        this._storage.removeItem('nonce');\r\n        this._storage.removeItem('expires_at');\r\n        this._storage.removeItem('id_token_claims_obj');\r\n        this._storage.removeItem('id_token_expires_at');\r\n        this._storage.removeItem('id_token_stored_at');\r\n        this._storage.removeItem('access_token_stored_at');\r\n        this._storage.removeItem('granted_scopes');\r\n        this._storage.removeItem('session_state');\r\n\r\n        this.silentRefreshSubject = null;\r\n\r\n        this.eventsSubject.next(new OAuthInfoEvent('logout'));\r\n\r\n        if (!this.logoutUrl) {\r\n            return;\r\n        }\r\n        if (noRedirectToLogoutUrl) {\r\n            return;\r\n        }\r\n\r\n        if (!id_token && !this.postLogoutRedirectUri) {\r\n            return;\r\n        }\r\n\r\n        let logoutUrl: string;\r\n\r\n        if (!this.validateUrlForHttps(this.logoutUrl)) {\r\n            throw new Error(\r\n                'logoutUrl must use https, or config value for property requireHttps must allow http'\r\n            );\r\n        }\r\n\r\n        // For backward compatibility\r\n        if (this.logoutUrl.indexOf('{{') > -1) {\r\n            logoutUrl = this.logoutUrl\r\n                .replace(/\\{\\{id_token\\}\\}/, id_token)\r\n                .replace(/\\{\\{client_id\\}\\}/, this.clientId);\r\n        } else {\r\n\r\n            let params = new HttpParams();\r\n\r\n            if (id_token) {\r\n                params = params.set('id_token_hint', id_token);\r\n            }\r\n\r\n            const postLogoutUrl = this.postLogoutRedirectUri || this.redirectUri;\r\n            if (postLogoutUrl) {\r\n                params = params.set('post_logout_redirect_uri', postLogoutUrl);\r\n            }\r\n\r\n            logoutUrl =\r\n                this.logoutUrl +\r\n                (this.logoutUrl.indexOf('?') > -1 ? '&' : '?') +\r\n                params.toString();\r\n        }\r\n        this.config.openUri(logoutUrl);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public createAndSaveNonce(): Promise<string> {\r\n        const that = this;\r\n        return this.createNonce().then(function (nonce: any) {\r\n            that._storage.setItem('nonce', nonce);\r\n            return nonce;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public ngOnDestroy() {\r\n        this.clearAccessTokenTimer();\r\n        this.clearIdTokenTimer();\r\n    }\r\n\r\n    protected createNonce(): Promise<string> {\r\n        return new Promise((resolve) => {\r\n            if (this.rngUrl) {\r\n                throw new Error(\r\n                    'createNonce with rng-web-api has not been implemented so far'\r\n                );\r\n            }\r\n\r\n            /*\r\n             * This alphabet uses a-z A-Z 0-9 _- symbols.\r\n             * Symbols order was changed for better gzip compression.\r\n             */\r\n            const url = 'Uint8ArdomValuesObj012345679BCDEFGHIJKLMNPQRSTWXYZ_cfghkpqvwxyz-';\r\n            let size = 45;\r\n            let id = '';\r\n\r\n            const crypto = self.crypto || self['msCrypto'];\r\n            if (crypto) {\r\n                const bytes = crypto.getRandomValues(new Uint8Array(size));\r\n                while (0 < size--) {\r\n                    id += url[bytes[size] & 63];\r\n                }\r\n            } else {\r\n                while (0 < size--) {\r\n                    id += url[Math.random() * 64 | 0];\r\n                }\r\n            }\r\n\r\n            resolve(id);\r\n        });\r\n    }\r\n\r\n    protected async checkAtHash(params: ValidationParams): Promise<boolean> {\r\n        if (!this.tokenValidationHandler) {\r\n            this.logger.warn(\r\n                'No tokenValidationHandler configured. Cannot check at_hash.'\r\n            );\r\n            return true;\r\n        }\r\n        return this.tokenValidationHandler.validateAtHash(params);\r\n    }\r\n\r\n    protected checkSignature(params: ValidationParams): Promise<any> {\r\n        if (!this.tokenValidationHandler) {\r\n            this.logger.warn(\r\n                'No tokenValidationHandler configured. Cannot check signature.'\r\n            );\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tokenValidationHandler.validateSignature(params);\r\n    }\r\n\r\n\r\n    /**\r\n     * Start the implicit flow or the code flow,\r\n     * depending on your configuration.\r\n     */\r\n    public initLoginFlow(\r\n        additionalState = '',\r\n        params = {}\r\n    ) {\r\n        if (this.responseType === 'code') {\r\n            return this.initCodeFlow(additionalState, params);\r\n        } else {\r\n            return this.initImplicitFlow(additionalState, params);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the authorization code flow and redirects to user to\r\n     * the auth servers login url.\r\n     */\r\n    public initCodeFlow(\r\n        additionalState = '',\r\n        params = {}\r\n    ): void {\r\n        if (this.loginUrl !== '') {\r\n            this.initCodeFlowInternal(additionalState, params);\r\n        } else {\r\n            this.events.pipe(filter(e => e.type === 'discovery_document_loaded'))\r\n            .subscribe(_ => this.initCodeFlowInternal(additionalState, params));\r\n        }\r\n    }\r\n\r\n    private initCodeFlowInternal(\r\n        additionalState = '',\r\n        params = {}\r\n    ): void {\r\n\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error('loginUrl must use Http. Also check property requireHttps.');\r\n        }\r\n\r\n        this.createLoginUrl(additionalState, '', null, false, params).then(function (url) {\r\n            location.href = url;\r\n        })\r\n        .catch(error => {\r\n            console.error('Error in initAuthorizationCodeFlow');\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    protected async createChallangeVerifierPairForPKCE(): Promise<[string, string]> {\r\n\r\n        if (!this.crypto) {\r\n            throw new Error('PKCI support for code flow needs a CryptoHander. Did you import the OAuthModule using forRoot() ?');\r\n        }\r\n\r\n\r\n        const verifier = await this.createNonce();\r\n        const challengeRaw = await this.crypto.calcHash(verifier, 'sha-256');\r\n        const challange = base64UrlEncode(challengeRaw);\r\n\r\n        return [challange, verifier];\r\n    }\r\n}\r\n","export abstract class OAuthModuleConfig {\r\n  resourceServer: OAuthResourceServerConfig;\r\n}\r\n\r\nexport abstract class OAuthResourceServerConfig {\r\n  /**\r\n   * Urls for which calls should be intercepted.\r\n   * If there is an ResourceServerErrorHandler registered, it is used for them.\r\n   * If sendAccessToken is set to true, the access_token is send to them too.\r\n   */\r\n  allowedUrls?: Array<string>;\r\n  sendAccessToken: boolean;\r\n  customUrlValidation?: (url: string) => boolean;\r\n}\r\n","import { HttpResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\nexport abstract class OAuthResourceServerErrorHandler {\r\n  abstract handleError(err: HttpResponse<any>): Observable<any>;\r\n}\r\n\r\nexport class OAuthNoopResourceServerErrorHandler\r\n  implements OAuthResourceServerErrorHandler {\r\n  handleError(err: HttpResponse<any>): Observable<any> {\r\n    return throwError(err);\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\n\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Observable, of, merge } from 'rxjs';\r\nimport { catchError, filter, map, take, mergeMap, timeout } from 'rxjs/operators';\r\nimport { OAuthResourceServerErrorHandler } from './resource-server-error-handler';\r\nimport { OAuthModuleConfig } from '../oauth-module.config';\r\nimport { OAuthStorage } from '../types';\r\nimport { OAuthService } from '../oauth-service';\r\n\r\nconst WAIT_FOR_TOKEN_RECEIVED = 1000;\r\n\r\n@Injectable()\r\nexport class DefaultOAuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(\r\n        private authStorage: OAuthStorage,\r\n        private oAuthService: OAuthService,\r\n        private errorHandler: OAuthResourceServerErrorHandler,\r\n        @Optional() private moduleConfig: OAuthModuleConfig\r\n    ) { }\r\n\r\n    private checkUrl(url: string): boolean {\r\n        if (this.moduleConfig.resourceServer.customUrlValidation) {\r\n            return this.moduleConfig.resourceServer.customUrlValidation(url);\r\n        }\r\n\r\n        if (this.moduleConfig.resourceServer.allowedUrls) {\r\n            return !!this.moduleConfig.resourceServer.allowedUrls.find(u => url.startsWith(u));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  public intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const url = req.url.toLowerCase();\r\n\r\n\r\n    if (!this.moduleConfig) {\r\n      return next.handle(req);\r\n    }\r\n    if (!this.moduleConfig.resourceServer) {\r\n      return next.handle(req);\r\n    }\r\n    if (this.moduleConfig.resourceServer.allowedUrls && !this.checkUrl(url)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const sendAccessToken = this.moduleConfig.resourceServer.sendAccessToken;\r\n\r\n    if (!sendAccessToken) {\r\n      return next\r\n        .handle(req)\r\n        .pipe(catchError(err => this.errorHandler.handleError(err)));\r\n    }\r\n\r\n    return merge(\r\n      of(this.oAuthService.getAccessToken()).pipe(\r\n        filter(token => token ? true : false),\r\n      ),\r\n      this.oAuthService.events.pipe(\r\n        filter(e => e.type === 'token_received'),\r\n        timeout(WAIT_FOR_TOKEN_RECEIVED),\r\n        map(_ => this.oAuthService.getAccessToken()),\r\n      ),\r\n    ).pipe(\r\n      take(1),\r\n      mergeMap(token => {\r\n        if (token) {\r\n          const header = 'Bearer ' + token;\r\n          const headers = req.headers.set('Authorization', header);\r\n          req = req.clone({ headers });\r\n        }\r\n\r\n        return next\r\n          .handle(req)\r\n          .pipe(catchError(err => this.errorHandler.handleError(err)));\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { ValidationHandler, ValidationParams } from './validation-handler';\r\n\r\n/**\r\n * A validation handler that isn't validating nothing.\r\n * Can be used to skip validation (at your own risk).\r\n */\r\nexport class NullValidationHandler implements ValidationHandler {\r\n  validateSignature(validationParams: ValidationParams): Promise<any> {\r\n    return Promise.resolve(null);\r\n  }\r\n  validateAtHash(validationParams: ValidationParams): Promise<boolean> {\r\n    return Promise.resolve(true);\r\n  }\r\n}\r\n","export function createDefaultLogger() {\r\n    return console;\r\n}\r\n\r\nexport function createDefaultStorage() {\r\n    return typeof sessionStorage !== 'undefined' ? sessionStorage : null;\r\n}","import {\r\n  AbstractValidationHandler,\r\n  ValidationParams\r\n} from './validation-handler';\r\n\r\n// declare var require: any;\r\n// let rs = require('jsrsasign');\r\n\r\nimport * as rs from 'jsrsasign';\r\n\r\n/**\r\n * Validates the signature of an id_token against one\r\n * of the keys of an JSON Web Key Set (jwks).\r\n *\r\n * This jwks can be provided by the discovery document.\r\n */\r\nexport class JwksValidationHandler extends AbstractValidationHandler {\r\n  /**\r\n   * Allowed algorithms\r\n   */\r\n  allowedAlgorithms: string[] = [\r\n    'HS256',\r\n    'HS384',\r\n    'HS512',\r\n    'RS256',\r\n    'RS384',\r\n    'RS512',\r\n    'ES256',\r\n    'ES384',\r\n    'PS256',\r\n    'PS384',\r\n    'PS512'\r\n  ];\r\n\r\n  /**\r\n   * Time period in seconds the timestamp in the signature can\r\n   * differ from the current time.\r\n   */\r\n  gracePeriodInSec = 600;\r\n\r\n  validateSignature(params: ValidationParams, retry = false): Promise<any> {\r\n    if (!params.idToken) throw new Error('Parameter idToken expected!');\r\n    if (!params.idTokenHeader)\r\n      throw new Error('Parameter idTokenHandler expected.');\r\n    if (!params.jwks) throw new Error('Parameter jwks expected!');\r\n\r\n    if (\r\n      !params.jwks['keys'] ||\r\n      !Array.isArray(params.jwks['keys']) ||\r\n      params.jwks['keys'].length === 0\r\n    ) {\r\n      throw new Error('Array keys in jwks missing!');\r\n    }\r\n\r\n    // console.debug('validateSignature: retry', retry);\r\n\r\n    let kid: string = params.idTokenHeader['kid'];\r\n    let keys: object[] = params.jwks['keys'];\r\n    let key: object;\r\n\r\n    let alg = params.idTokenHeader['alg'];\r\n\r\n    if (kid) {\r\n      key = keys.find(k => k['kid'] === kid /* && k['use'] === 'sig' */);\r\n    } else {\r\n      let kty = this.alg2kty(alg);\r\n      let matchingKeys = keys.filter(\r\n        k => k['kty'] === kty && k['use'] === 'sig'\r\n      );\r\n\r\n      /*\r\n            if (matchingKeys.length == 0) {\r\n                let error = 'No matching key found.';\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }*/\r\n      if (matchingKeys.length > 1) {\r\n        let error =\r\n          'More than one matching key found. Please specify a kid in the id_token header.';\r\n        console.error(error);\r\n        return Promise.reject(error);\r\n      } else if (matchingKeys.length === 1) {\r\n        key = matchingKeys[0];\r\n      }\r\n    }\r\n\r\n    if (!key && !retry && params.loadKeys) {\r\n      return params\r\n        .loadKeys()\r\n        .then(loadedKeys => (params.jwks = loadedKeys))\r\n        .then(_ => this.validateSignature(params, true));\r\n    }\r\n\r\n    if (!key && retry && !kid) {\r\n      let error = 'No matching key found.';\r\n      console.error(error);\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (!key && retry && kid) {\r\n      let error =\r\n        'expected key not found in property jwks. ' +\r\n        'This property is most likely loaded with the ' +\r\n        'discovery document. ' +\r\n        'Expected key id (kid): ' +\r\n        kid;\r\n\r\n      console.error(error);\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let keyObj = rs.KEYUTIL.getKey(key);\r\n    let validationOptions = {\r\n      alg: this.allowedAlgorithms,\r\n      gracePeriod: this.gracePeriodInSec\r\n    };\r\n    let isValid = rs.KJUR.jws.JWS.verifyJWT(\r\n      params.idToken,\r\n      keyObj,\r\n      validationOptions\r\n    );\r\n\r\n    if (isValid) {\r\n      return Promise.resolve();\r\n    } else {\r\n      return Promise.reject('Signature not valid');\r\n    }\r\n  }\r\n\r\n  private alg2kty(alg: string) {\r\n    switch (alg.charAt(0)) {\r\n      case 'R':\r\n        return 'RSA';\r\n      case 'E':\r\n        return 'EC';\r\n      default:\r\n        throw new Error('Cannot infer kty from alg: ' + alg);\r\n    }\r\n  }\r\n\r\n  calcHash(valueToHash: string, algorithm: string): Promise<string> {\r\n    let hashAlg = new rs.KJUR.crypto.MessageDigest({ alg: algorithm });\r\n    let result = hashAlg.digestString(valueToHash);\r\n    let byteArrayAsString = this.toByteArrayAsString(result);\r\n    return Promise.resolve(byteArrayAsString);\r\n  }\r\n\r\n  toByteArrayAsString(hexString: string) {\r\n    let result = '';\r\n    for (let i = 0; i < hexString.length; i += 2) {\r\n      let hexDigit = hexString.charAt(i) + hexString.charAt(i + 1);\r\n      let num = parseInt(hexDigit, 16);\r\n      result += String.fromCharCode(num);\r\n    }\r\n    return result;\r\n  }\r\n}","import { OAuthStorage, OAuthLogger } from './types';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\n\r\nimport { OAuthService } from './oauth-service';\r\nimport { UrlHelperService } from './url-helper.service';\r\n\r\nimport { OAuthModuleConfig } from './oauth-module.config';\r\nimport {\r\n  OAuthResourceServerErrorHandler,\r\n  OAuthNoopResourceServerErrorHandler\r\n} from './interceptors/resource-server-error-handler';\r\nimport { DefaultOAuthInterceptor } from './interceptors/default-oauth.interceptor';\r\nimport { ValidationHandler } from './token-validation/validation-handler';\r\nimport { NullValidationHandler } from './token-validation/null-validation-handler';\r\nimport { createDefaultLogger, createDefaultStorage } from './factories';\r\nimport { CryptoHandler } from './token-validation/crypto-handler';\r\nimport { JwksValidationHandler } from './token-validation/jwks-validation-handler';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class OAuthModule {\r\n  static forRoot(\r\n    config: OAuthModuleConfig = null,\r\n    validationHandlerClass = NullValidationHandler\r\n  ): ModuleWithProviders {\r\n    return {\r\n      ngModule: OAuthModule,\r\n      providers: [\r\n        OAuthService,\r\n        UrlHelperService,\r\n        { provide: OAuthLogger, useFactory: createDefaultLogger },\r\n        { provide: OAuthStorage, useFactory: createDefaultStorage },\r\n        { provide: ValidationHandler, useClass: validationHandlerClass},\r\n        { provide: CryptoHandler, useClass: JwksValidationHandler },\r\n        {\r\n          provide: OAuthResourceServerErrorHandler,\r\n          useClass: OAuthNoopResourceServerErrorHandler\r\n        },\r\n        { provide: OAuthModuleConfig, useValue: config },\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: DefaultOAuthInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { AuthConfig } from './auth.config';\r\n\r\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('AUTH_CONFIG');\r\n"]}